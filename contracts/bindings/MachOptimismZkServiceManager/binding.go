// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contractMachOptimismZkServiceManager

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IMachOptimismL2OutputAlert is an auto generated low-level Go binding around an user-defined struct.
type IMachOptimismL2OutputAlert struct {
	L2BlockNumber      *big.Int
	InvalidOutputIndex *big.Int
	InvalidOutputRoot  [32]byte
	ExpectOutputRoot   [32]byte
	Submitter          common.Address
}

// ISignatureUtilsSignatureWithSaltAndExpiry is an auto generated low-level Go binding around an user-defined struct.
type ISignatureUtilsSignatureWithSaltAndExpiry struct {
	Signature []byte
	Salt      [32]byte
	Expiry    *big.Int
}

// ContractMachOptimismZkServiceManagerMetaData contains all meta data concerning the ContractMachOptimismZkServiceManager contract.
var ContractMachOptimismZkServiceManagerMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"rollupChainID_\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"__avsDirectory\",\"type\":\"address\",\"internalType\":\"contractIAVSDirectory\"},{\"name\":\"__registryCoordinator\",\"type\":\"address\",\"internalType\":\"contractIRegistryCoordinator\"},{\"name\":\"__stakeRegistry\",\"type\":\"address\",\"internalType\":\"contractIStakeRegistry\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"alertBlockMismatch\",\"inputs\":[{\"name\":\"invalidOutputRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"expectOutputRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"l2BlockNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"alertBlockOutputOracleMismatch\",\"inputs\":[{\"name\":\"invalidOutputIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"expectOutputRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"avsDirectory\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"clearAlerts\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"clearBlockAlertsUpTo\",\"inputs\":[{\"name\":\"l2BlockNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"deregisterOperatorFromAVS\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"getAlert\",\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structIMachOptimism.L2OutputAlert\",\"components\":[{\"name\":\"l2BlockNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"invalidOutputIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"invalidOutputRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"expectOutputRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"submitter\",\"type\":\"address\",\"internalType\":\"address\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getAlertsLength\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getOperatorRestakedStrategies\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getRegistryCoordinatorAddress\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getRestakeableStrategies\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"imageId\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"contractOwner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"imageId_\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"l2OutputOracle_\",\"type\":\"address\",\"internalType\":\"contractIMachOptimismL2OutputOracle\"},{\"name\":\"verifier_\",\"type\":\"address\",\"internalType\":\"contractIRiscZeroVerifier\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"l2OutputOracle\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIMachOptimismL2OutputOracle\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"latestAlertBlockNumber\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"latestUnprovedBlockNumber\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"provedIndex\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"registerOperatorToAVS\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operatorSignature\",\"type\":\"tuple\",\"internalType\":\"structISignatureUtils.SignatureWithSaltAndExpiry\",\"components\":[{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"salt\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"expiry\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"rollupChainID\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"setImageId\",\"inputs\":[{\"name\":\"imageId_\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setRiscZeroVerifier\",\"inputs\":[{\"name\":\"verifier_\",\"type\":\"address\",\"internalType\":\"contractIRiscZeroVerifier\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"settlementChainID\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"submitProve\",\"inputs\":[{\"name\":\"imageId_\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"journal\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"seal\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"postStateDigest\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"l2OutputIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"updateAVSMetadataURI\",\"inputs\":[{\"name\":\"_metadataURI\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"verifier\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIRiscZeroVerifier\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"AlertBlockMismatch\",\"inputs\":[{\"name\":\"invalidOutputRoot\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"expectOutputRoot\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"l2BlockNumber\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"AlertBlockOutputOracleMismatch\",\"inputs\":[{\"name\":\"invalidOutputIndex\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"invalidOutputRoot\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"expectOutputRoot\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"l2BlockNumber\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"AlertDelete\",\"inputs\":[{\"name\":\"invalidOutputIndex\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"expectOutputRoot\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"OutputRoot\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"l2BlockNumber\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"submitter\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"AlertReset\",\"inputs\":[{\"name\":\"invalidOutputIndex\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"invalidOutputRoot\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"expectOutputRoot\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"l2BlockNumber\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"fromSubmitter\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"toSubmitter\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"SubmittedBlockProve\",\"inputs\":[{\"name\":\"invalidOutputIndex\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"OutputRoot\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"l2BlockNumber\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"InvalidAlert\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidAlertType\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidCheckpoint\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidIndex\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidJournal\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidProvedIndex\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NoAlert\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotInitialized\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotOperator\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ParentCheckpointNumberMismatch\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ParentCheckpointOutputRootMismatch\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ProveBlockNumberMismatch\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ProveImageIdMismatch\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ProveVerifyFailed\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"UselessAlert\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ZeroAddress\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ZeroValue\",\"inputs\":[]}]",
	Bin: "0x6101206040523480156200001257600080fd5b50604051620030183803806200301883398101604081905262000035916200014d565b4660805260a08490526001600160a01b038084166101005280831660c052811660e0528282826200006562000072565b50505050505050620001a9565b600054610100900460ff1615620000df5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116101562000132576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6001600160a01b03811681146200014a57600080fd5b50565b600080600080608085870312156200016457600080fd5b845193506020850151620001788162000134565b60408601519093506200018b8162000134565b60608601519092506200019e8162000134565b939692955090935050565b60805160a05160c05160e05161010051612dac6200026c600039600081816102af0152818161168c0152818161176001526117d8015260008181610668015281816107c40152818161085b01528181611de101528181611f6501526120040152600081816102890152818161049301528181610522015281816105a201528181610942015281816110c4015281816116380152818161170401528181611ac901528181611d1f0152611ec001526000610431015260006101ea0152612dac6000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c806396c9f17e116100f9578063e481af9d11610097578063ef3f7dd511610071578063ef3f7dd514610408578063f2fde38b14610411578063f926337b14610424578063fc51ecae1461042c57600080fd5b8063e481af9d146103f0578063e6251872146103f8578063ebf8792b1461040057600080fd5b8063a98fb355116100d3578063a98fb355146103a4578063cb71f06d146103b7578063d4034007146103ca578063d94c50f9146103dd57600080fd5b806396c9f17e1461036b5780639926ee7d1461037e578063a364f4da1461039157600080fd5b80635136a08a116101665780637852f6cd116101405780637852f6cd146102db57806385081886146102ee5780638da5cb5b14610347578063901129c21461035857600080fd5b80635136a08a146102875780636b3aa72e146102ad578063715018a6146102d357600080fd5b80632b7ac3f3116101a25780632b7ac3f31461021657806333cfb7b7146102415780634b4b0325146102615780634d9f15591461027457600080fd5b806306ccde3a146101c957806322623897146101e557806326bbd9061461020c575b600080fd5b6101d2609b5481565b6040519081526020015b60405180910390f35b6101d27f000000000000000000000000000000000000000000000000000000000000000081565b610214610453565b005b609854610229906001600160a01b031681565b6040516001600160a01b0390911681526020016101dc565b61025461024f366004612585565b61046e565b6040516101dc91906125a9565b61021461026f36600461263f565b61093e565b609754610229906001600160a01b031681565b7f0000000000000000000000000000000000000000000000000000000000000000610229565b7f0000000000000000000000000000000000000000000000000000000000000000610229565b6102146110ac565b6102146102e93660046126c8565b6110c0565b6103016102fc3660046126ea565b6113a2565b6040516101dc9190815181526020808301519082015260408083015190820152606080830151908201526080918201516001600160a01b03169181019190915260a00190565b6033546001600160a01b0316610229565b6102146103663660046126ea565b61145c565b610214610379366004612703565b611469565b61021461038c36600461280b565b61162d565b61021461039f366004612585565b6116f9565b6102146103b23660046128b6565b6117b9565b6102146103c53660046126ea565b61180d565b6102146103d8366004612585565b611a74565b6102146103eb366004612907565b611ac5565b610254611d19565b6101d26120e3565b6101d261212b565b6101d260995481565b61021461041f366004612585565b61217c565b609a546101d2565b6101d27f000000000000000000000000000000000000000000000000000000000000000081565b61045b6121f5565b610467609a6000612515565b6000609b55565b6040516309aa152760e11b81526001600160a01b0382811660048301526060916000917f000000000000000000000000000000000000000000000000000000000000000016906313542a4e90602401602060405180830381865afa1580156104da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fe9190612933565b60405163871ef04960e01b8152600481018290529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063871ef04990602401602060405180830381865afa158015610569573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058d919061294c565b90506001600160c01b038116158061062757507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639aa1653d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106229190612975565b60ff16155b1561064357505060408051600081526020810190915292915050565b6000610657826001600160c01b031661224f565b90506000805b825181101561072d577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633ca5a5f58483815181106106a7576106a7612998565b01602001516040516001600160e01b031960e084901b16815260f89190911c6004820152602401602060405180830381865afa1580156106eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070f9190612933565b61071990836129c4565b915080610725816129dc565b91505061065d565b5060008167ffffffffffffffff81111561074957610749612756565b604051908082528060200260200182016040528015610772578160200160208202803683370190505b5090506000805b845181101561093157600085828151811061079657610796612998565b0160200151604051633ca5a5f560e01b815260f89190911c6004820181905291506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633ca5a5f590602401602060405180830381865afa15801561080b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082f9190612933565b905060005b8181101561091b576040516356e4026d60e11b815260ff84166004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063adc804da906044016040805180830381865afa1580156108a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cd91906129f7565b600001518686815181106108e3576108e3612998565b6001600160a01b039092166020928302919091019091015284610905816129dc565b9550508080610913906129dc565b915050610834565b5050508080610929906129dc565b915050610779565b5090979650505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635df459466040518163ffffffff1660e01b8152600401602060405180830381865afa15801561099e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c29190612a67565b6040516309aa152760e11b81523360048201529091506000906001600160a01b038316906313542a4e90602401602060405180830381865afa158015610a0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a309190612933565b905080610a5057604051631f0853c160e21b815260040160405180910390fd5b609a54801580610a605750609b54155b15610a7e5760405163015dfef360e71b815260040160405180910390fd5b83610a9c576040516363df817160e01b815260040160405180910390fd5b80609b541115610abf57604051630640096d60e11b815260040160405180910390fd5b609954610adf576040516321c4e35760e21b815260040160405180910390fd5b8960995414610b01576040516308dbddfb60e01b815260040160405180910390fd5b87610b1f576040516345d7e50160e11b815260040160405180910390fd5b609860009054906101000a90046001600160a01b03166001600160a01b0316636efef00988886099548960028f8f604051610b5b929190612a84565b602060405180830381855afa158015610b78573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610b9b9190612933565b6040518663ffffffff1660e01b8152600401610bbb959493929190612a94565b602060405180830381865afa158015610bd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfc9190612adb565b610c1957604051637aa7b8df60e01b815260040160405180910390fd5b60975460405163a25ae55760e01b8152600481018690526000916001600160a01b03169063a25ae55790602401606060405180830381865afa158015610c63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c879190612b19565b905080604001516001600160801b031660001480610ca457508051155b15610cc257604051630f0f97d160e01b815260040160405180910390fd5b6000808060001b905060008060001b905060008060001b905060008e8e810190610cec9190612b7e565b609b5493995097509295509350909150600090609a90610d0e90600190612bb9565b81548110610d1e57610d1e612998565b60009182526020918290206040805160a0810182526005909302909101805480845260018201549484019490945260028101549183019190915260038101546060830152600401546001600160a01b0316608082015291508614610d9557604051638a9e180b60e01b815260040160405180910390fd5b86604001516001600160801b03168214610dc25760405163c47fbad160e01b815260040160405180910390fd5b86518314610de357604051632d2ce58f60e21b815260040160405180910390fd5b60208101516060820151861461104f578160400151861415610f725788609b541015610ebf57609b545b89811015610ebd57609a610e228260016129c4565b81548110610e3257610e32612998565b9060005260206000209060050201609a8281548110610e5357610e53612998565b600091825260209091208254600590920201908155600180830154908201556002808301549082015560038083015490820155600491820154910180546001600160a01b0319166001600160a01b0390921691909117905580610eb5816129dc565b915050610e0d565b505b609a805480610ed057610ed0612bd0565b6000828152602081206005600019909301928302018181556001810182905560028101829055600381019190915560040180546001600160a01b03191690559055608082015160608301516040516001600160a01b039290921691899184917f408396ca734356c56aefed3f2a3535a73c1b115fdb31824b9d4ce2ff08476c9c91610f65918c90918252602082015260400190565b60405180910390a461104f565b85609a6001609b54610f849190612bb9565b81548110610f9457610f94612998565b90600052602060002090600502016003018190555033609a6001609b54610fbb9190612bb9565b81548110610fcb57610fcb612998565b60009182526020918290206005919091020160040180546001600160a01b0319166001600160a01b03938416179055604084810151608086015182519182529281018a905291909216918101919091523390889083907fcb5a8ddfe5a72a6fb9d08f0c6832fd4097a9c52d8dd57385ad4d1bedbec43d2b9060600160405180910390a45b6001609b5461105e9190612bb9565b609b55604051868152879082907fdd6cfadd7c543e03ef0e699385c954bf8b6b87af01b48fa031982257e5f4bc649060200160405180910390a3505050505050505050505050505050505050565b6110b46121f5565b6110be6000612312565b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635df459466040518163ffffffff1660e01b8152600401602060405180830381865afa158015611120573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111449190612a67565b6040516309aa152760e11b81523360048201529091506000906001600160a01b038316906313542a4e90602401602060405180830381865afa15801561118e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b29190612933565b9050806111d257604051631f0853c160e21b815260040160405180910390fd5b609760009054906101000a90046001600160a01b03166001600160a01b03166369f16eec6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611225573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112499190612933565b84106112685760405163012323ed60e31b815260040160405180910390fd5b60975460405163a25ae55760e01b8152600481018690526000916001600160a01b03169063a25ae55790602401606060405180830381865afa1580156112b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d69190612b19565b60408101519091506001600160801b031660006112f16120e3565b905080158015906113025750808210155b15611320576040516348ee4ce560e11b815260040160405180910390fd5b81158061132d5750825186145b1561134b57604051633bc9dac560e01b815260040160405180910390fd5b82516040805191825260208201889052839189917ffb94279474deafe440aa268ffe2ed9ee06c6b9805237947f03a0825dea009a61910160405180910390a382516113999087898533612364565b50505050505050565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152609a5482106113ef576040516363df817160e01b815260040160405180910390fd5b609a828154811061140257611402612998565b60009182526020918290206040805160a081018252600590930290910180548352600181015493830193909352600283015490820152600382015460608201526004909101546001600160a01b0316608082015292915050565b6114646121f5565b609955565b600054610100900460ff16158080156114895750600054600160ff909116105b806114a35750303b1580156114a3575060005460ff166001145b61150b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801561152e576000805461ff0019166101001790555b611536612485565b61153f85612312565b6001600160a01b0383166115665760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b03821661158d5760405163d92e233d60e01b815260040160405180910390fd5b836115ab57604051637c946ed760e01b815260040160405180910390fd5b609780546001600160a01b038086166001600160a01b031992831617909255609880549285169290911691909117905560998490558015611626576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146116755760405162461bcd60e51b815260040161150290612be6565b604051639926ee7d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639926ee7d906116c39085908590600401612cab565b600060405180830381600087803b1580156116dd57600080fd5b505af11580156116f1573d6000803e3d6000fd5b505050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146117415760405162461bcd60e51b815260040161150290612be6565b6040516351b27a6d60e11b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063a364f4da906024015b600060405180830381600087803b1580156117a557600080fd5b505af1158015611626573d6000803e3d6000fd5b6117c16121f5565b60405163a98fb35560e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a98fb3559061178b908490600401612cf6565b6118156121f5565b6000811161185d5760405162461bcd60e51b815260206004820152601560248201527424b73b30b634b2103619213637b1b5a73ab6b132b960591b6044820152606401611502565b609a5480158061186d5750609b54155b156118af5760405162461bcd60e51b815260206004820152601260248201527127379030b632b93a39903a379031b632b0b960711b6044820152606401611502565b80609b5411156118f75760405162461bcd60e51b8152602060048201526013602482015272092dcecc2d8d2c840e0e4deeccac892dcc8caf606b1b6044820152606401611502565b60006001609b546119089190612bb9565b90505b81811015611a695782609a828154811061192757611927612998565b90600052602060002090600502016000015411611a5257805b61194b600184612bb9565b8110156119fa57609a61195f8260016129c4565b8154811061196f5761196f612998565b9060005260206000209060050201609a828154811061199057611990612998565b600091825260209091208254600590920201908155600180830154908201556002808301549082015560038083015490820155600491820154910180546001600160a01b0319166001600160a01b03909216919091179055806119f2816129dc565b915050611940565b50609a805480611a0c57611a0c612bd0565b6000828152602081206005600019909301928302018181556001810182905560028101829055600381019190915560040180546001600160a01b03191690559055611a57565b611a69565b80611a61816129dc565b91505061190b565b5050609a54609b5550565b611a7c6121f5565b6001600160a01b038116611aa35760405163d92e233d60e01b815260040160405180910390fd5b609880546001600160a01b0319166001600160a01b0392909216919091179055565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635df459466040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b499190612a67565b6040516309aa152760e11b81523360048201529091506000906001600160a01b038316906313542a4e90602401602060405180830381865afa158015611b93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb79190612933565b905080611bd757604051631f0853c160e21b815260040160405180910390fd5b6000611be16120e3565b90508015801590611bf25750808410155b15611c10576040516348ee4ce560e11b815260040160405180910390fd5b831580611c1c57508486145b15611c3a57604051633bc9dac560e01b815260040160405180910390fd5b609760009054906101000a90046001600160a01b03166001600160a01b0316634599c7886040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb19190612933565b8411611cd05760405163012323ed60e31b815260040160405180910390fd5b604080518781526020810187905285917f72025bfbd961ed777ed0367a97f4056b2a4e75651b1d12c67ac9722309aaed15910160405180910390a26116f1868660008733612364565b606060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639aa1653d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d9f9190612975565b60ff16905080611dbd57505060408051600081526020810190915290565b6000805b82811015611e7257604051633ca5a5f560e01b815260ff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690633ca5a5f590602401602060405180830381865afa158015611e30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e549190612933565b611e5e90836129c4565b915080611e6a816129dc565b915050611dc1565b5060008167ffffffffffffffff811115611e8e57611e8e612756565b604051908082528060200260200182016040528015611eb7578160200160208202803683370190505b5090506000805b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639aa1653d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f409190612975565b60ff168110156120d957604051633ca5a5f560e01b815260ff821660048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690633ca5a5f590602401602060405180830381865afa158015611fb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd89190612933565b905060005b818110156120c4576040516356e4026d60e11b815260ff84166004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063adc804da906044016040805180830381865afa158015612052573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061207691906129f7565b6000015185858151811061208c5761208c612998565b6001600160a01b0390921660209283029190910190910152836120ae816129dc565b94505080806120bc906129dc565b915050611fdd565b505080806120d1906129dc565b915050611ebe565b5090949350505050565b609a546000901561212557609a80546120fe90600190612bb9565b8154811061210e5761210e612998565b906000526020600020906005020160000154905090565b50600090565b6000609b546000141561213e5750600090565b609a54609b54111561216357604051630640096d60e11b815260040160405180910390fd5b609a541561212557609a6001609b546120fe9190612bb9565b6121846121f5565b6001600160a01b0381166121e95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401611502565b6121f281612312565b50565b6033546001600160a01b031633146110be5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401611502565b606060008061225d846124b4565b61ffff1667ffffffffffffffff81111561227957612279612756565b6040519080825280601f01601f1916602001820160405280156122a3576020820181803683370190505b5090506000805b8251821080156122bb575061010081105b156120d9576001811b935085841615612302578060f81b8383815181106122e4576122e4612998565b60200101906001600160f81b031916908160001a9053508160010191505b61230b816129dc565b90506122aa565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040805160a081018252928352602083019384528201948552606082019384526001600160a01b0390811660808301908152609a8054600181018255600082905293517f44da158ba27f9252712a74ff6a55c5d531f69609f1f6e7f17c4443a8e2089be460059095029485015593517f44da158ba27f9252712a74ff6a55c5d531f69609f1f6e7f17c4443a8e2089be584015594517f44da158ba27f9252712a74ff6a55c5d531f69609f1f6e7f17c4443a8e2089be683015592517f44da158ba27f9252712a74ff6a55c5d531f69609f1f6e7f17c4443a8e2089be782015592517f44da158ba27f9252712a74ff6a55c5d531f69609f1f6e7f17c4443a8e2089be890930180546001600160a01b0319169390921692909217905554609b55565b600054610100900460ff166124ac5760405162461bcd60e51b815260040161150290612d09565b6110be6124e5565b6000805b82156124df576124c9600184612bb9565b90921691806124d781612d54565b9150506124b8565b92915050565b600054610100900460ff1661250c5760405162461bcd60e51b815260040161150290612d09565b6110be33612312565b50805460008255600502906000526020600020908101906121f291905b8082111561256c576000808255600182018190556002820181905560038201556004810180546001600160a01b0319169055600501612532565b5090565b6001600160a01b03811681146121f257600080fd5b60006020828403121561259757600080fd5b81356125a281612570565b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156125ea5783516001600160a01b0316835292840192918401916001016125c5565b50909695505050505050565b60008083601f84011261260857600080fd5b50813567ffffffffffffffff81111561262057600080fd5b60208301915083602082850101111561263857600080fd5b9250929050565b600080600080600080600060a0888a03121561265a57600080fd5b87359650602088013567ffffffffffffffff8082111561267957600080fd5b6126858b838c016125f6565b909850965060408a013591508082111561269e57600080fd5b506126ab8a828b016125f6565b989b979a5095989597966060870135966080013595509350505050565b600080604083850312156126db57600080fd5b50508035926020909101359150565b6000602082840312156126fc57600080fd5b5035919050565b6000806000806080858703121561271957600080fd5b843561272481612570565b935060208501359250604085013561273b81612570565b9150606085013561274b81612570565b939692955090935050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff8111828210171561278f5761278f612756565b60405290565b600067ffffffffffffffff808411156127b0576127b0612756565b604051601f8501601f19908116603f011681019082821181831017156127d8576127d8612756565b816040528093508581528686860111156127f157600080fd5b858560208301376000602087830101525050509392505050565b6000806040838503121561281e57600080fd5b823561282981612570565b9150602083013567ffffffffffffffff8082111561284657600080fd5b908401906060828703121561285a57600080fd5b61286261276c565b82358281111561287157600080fd5b83019150601f8201871361288457600080fd5b61289387833560208501612795565b815260208301356020820152604083013560408201528093505050509250929050565b6000602082840312156128c857600080fd5b813567ffffffffffffffff8111156128df57600080fd5b8201601f810184136128f057600080fd5b6128ff84823560208401612795565b949350505050565b60008060006060848603121561291c57600080fd5b505081359360208301359350604090920135919050565b60006020828403121561294557600080fd5b5051919050565b60006020828403121561295e57600080fd5b81516001600160c01b03811681146125a257600080fd5b60006020828403121561298757600080fd5b815160ff811681146125a257600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156129d7576129d76129ae565b500190565b60006000198214156129f0576129f06129ae565b5060010190565b600060408284031215612a0957600080fd5b6040516040810181811067ffffffffffffffff82111715612a2c57612a2c612756565b6040528251612a3a81612570565b815260208301516bffffffffffffffffffffffff81168114612a5b57600080fd5b60208201529392505050565b600060208284031215612a7957600080fd5b81516125a281612570565b8183823760009101908152919050565b60808152846080820152848660a0830137600060a08683010152600060a0601f19601f88011683010190508460208301528360408301528260608301529695505050505050565b600060208284031215612aed57600080fd5b815180151581146125a257600080fd5b80516001600160801b0381168114612b1457600080fd5b919050565b600060608284031215612b2b57600080fd5b6040516060810181811067ffffffffffffffff82111715612b4e57612b4e612756565b60405282518152612b6160208401612afd565b6020820152612b7260408401612afd565b60408201529392505050565b600080600080600060a08688031215612b9657600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b600082821015612bcb57612bcb6129ae565b500390565b634e487b7160e01b600052603160045260246000fd5b60208082526052908201527f536572766963654d616e61676572426173652e6f6e6c7952656769737472794360408201527f6f6f7264696e61746f723a2063616c6c6572206973206e6f742074686520726560608201527133b4b9ba393c9031b7b7b93234b730ba37b960711b608082015260a00190565b6000815180845260005b81811015612c8457602081850181015186830182015201612c68565b81811115612c96576000602083870101525b50601f01601f19169290920160200192915050565b60018060a01b0383168152604060208201526000825160606040840152612cd560a0840182612c5e565b90506020840151606084015260408401516080840152809150509392505050565b6020815260006125a26020830184612c5e565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600061ffff80831681811415612d6c57612d6c6129ae565b600101939250505056fea2646970667358221220ed0394f9a3bf4283a5c4399850116b16bef304a80c1ea222d4d2ac17874154e764736f6c634300080c0033",
}

// ContractMachOptimismZkServiceManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractMachOptimismZkServiceManagerMetaData.ABI instead.
var ContractMachOptimismZkServiceManagerABI = ContractMachOptimismZkServiceManagerMetaData.ABI

// ContractMachOptimismZkServiceManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractMachOptimismZkServiceManagerMetaData.Bin instead.
var ContractMachOptimismZkServiceManagerBin = ContractMachOptimismZkServiceManagerMetaData.Bin

// DeployContractMachOptimismZkServiceManager deploys a new Ethereum contract, binding an instance of ContractMachOptimismZkServiceManager to it.
func DeployContractMachOptimismZkServiceManager(auth *bind.TransactOpts, backend bind.ContractBackend, rollupChainID_ *big.Int, __avsDirectory common.Address, __registryCoordinator common.Address, __stakeRegistry common.Address) (common.Address, *types.Transaction, *ContractMachOptimismZkServiceManager, error) {
	parsed, err := ContractMachOptimismZkServiceManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractMachOptimismZkServiceManagerBin), backend, rollupChainID_, __avsDirectory, __registryCoordinator, __stakeRegistry)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ContractMachOptimismZkServiceManager{ContractMachOptimismZkServiceManagerCaller: ContractMachOptimismZkServiceManagerCaller{contract: contract}, ContractMachOptimismZkServiceManagerTransactor: ContractMachOptimismZkServiceManagerTransactor{contract: contract}, ContractMachOptimismZkServiceManagerFilterer: ContractMachOptimismZkServiceManagerFilterer{contract: contract}}, nil
}

// ContractMachOptimismZkServiceManager is an auto generated Go binding around an Ethereum contract.
type ContractMachOptimismZkServiceManager struct {
	ContractMachOptimismZkServiceManagerCaller     // Read-only binding to the contract
	ContractMachOptimismZkServiceManagerTransactor // Write-only binding to the contract
	ContractMachOptimismZkServiceManagerFilterer   // Log filterer for contract events
}

// ContractMachOptimismZkServiceManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractMachOptimismZkServiceManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractMachOptimismZkServiceManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractMachOptimismZkServiceManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractMachOptimismZkServiceManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractMachOptimismZkServiceManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractMachOptimismZkServiceManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractMachOptimismZkServiceManagerSession struct {
	Contract     *ContractMachOptimismZkServiceManager // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                         // Call options to use throughout this session
	TransactOpts bind.TransactOpts                     // Transaction auth options to use throughout this session
}

// ContractMachOptimismZkServiceManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractMachOptimismZkServiceManagerCallerSession struct {
	Contract *ContractMachOptimismZkServiceManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                               // Call options to use throughout this session
}

// ContractMachOptimismZkServiceManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractMachOptimismZkServiceManagerTransactorSession struct {
	Contract     *ContractMachOptimismZkServiceManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                               // Transaction auth options to use throughout this session
}

// ContractMachOptimismZkServiceManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractMachOptimismZkServiceManagerRaw struct {
	Contract *ContractMachOptimismZkServiceManager // Generic contract binding to access the raw methods on
}

// ContractMachOptimismZkServiceManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractMachOptimismZkServiceManagerCallerRaw struct {
	Contract *ContractMachOptimismZkServiceManagerCaller // Generic read-only contract binding to access the raw methods on
}

// ContractMachOptimismZkServiceManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractMachOptimismZkServiceManagerTransactorRaw struct {
	Contract *ContractMachOptimismZkServiceManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContractMachOptimismZkServiceManager creates a new instance of ContractMachOptimismZkServiceManager, bound to a specific deployed contract.
func NewContractMachOptimismZkServiceManager(address common.Address, backend bind.ContractBackend) (*ContractMachOptimismZkServiceManager, error) {
	contract, err := bindContractMachOptimismZkServiceManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ContractMachOptimismZkServiceManager{ContractMachOptimismZkServiceManagerCaller: ContractMachOptimismZkServiceManagerCaller{contract: contract}, ContractMachOptimismZkServiceManagerTransactor: ContractMachOptimismZkServiceManagerTransactor{contract: contract}, ContractMachOptimismZkServiceManagerFilterer: ContractMachOptimismZkServiceManagerFilterer{contract: contract}}, nil
}

// NewContractMachOptimismZkServiceManagerCaller creates a new read-only instance of ContractMachOptimismZkServiceManager, bound to a specific deployed contract.
func NewContractMachOptimismZkServiceManagerCaller(address common.Address, caller bind.ContractCaller) (*ContractMachOptimismZkServiceManagerCaller, error) {
	contract, err := bindContractMachOptimismZkServiceManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractMachOptimismZkServiceManagerCaller{contract: contract}, nil
}

// NewContractMachOptimismZkServiceManagerTransactor creates a new write-only instance of ContractMachOptimismZkServiceManager, bound to a specific deployed contract.
func NewContractMachOptimismZkServiceManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractMachOptimismZkServiceManagerTransactor, error) {
	contract, err := bindContractMachOptimismZkServiceManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractMachOptimismZkServiceManagerTransactor{contract: contract}, nil
}

// NewContractMachOptimismZkServiceManagerFilterer creates a new log filterer instance of ContractMachOptimismZkServiceManager, bound to a specific deployed contract.
func NewContractMachOptimismZkServiceManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractMachOptimismZkServiceManagerFilterer, error) {
	contract, err := bindContractMachOptimismZkServiceManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractMachOptimismZkServiceManagerFilterer{contract: contract}, nil
}

// bindContractMachOptimismZkServiceManager binds a generic wrapper to an already deployed contract.
func bindContractMachOptimismZkServiceManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractMachOptimismZkServiceManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractMachOptimismZkServiceManager.Contract.ContractMachOptimismZkServiceManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.Contract.ContractMachOptimismZkServiceManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.Contract.ContractMachOptimismZkServiceManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractMachOptimismZkServiceManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.Contract.contract.Transact(opts, method, params...)
}

// AvsDirectory is a free data retrieval call binding the contract method 0x6b3aa72e.
//
// Solidity: function avsDirectory() view returns(address)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerCaller) AvsDirectory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractMachOptimismZkServiceManager.contract.Call(opts, &out, "avsDirectory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AvsDirectory is a free data retrieval call binding the contract method 0x6b3aa72e.
//
// Solidity: function avsDirectory() view returns(address)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerSession) AvsDirectory() (common.Address, error) {
	return _ContractMachOptimismZkServiceManager.Contract.AvsDirectory(&_ContractMachOptimismZkServiceManager.CallOpts)
}

// AvsDirectory is a free data retrieval call binding the contract method 0x6b3aa72e.
//
// Solidity: function avsDirectory() view returns(address)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerCallerSession) AvsDirectory() (common.Address, error) {
	return _ContractMachOptimismZkServiceManager.Contract.AvsDirectory(&_ContractMachOptimismZkServiceManager.CallOpts)
}

// GetAlert is a free data retrieval call binding the contract method 0x85081886.
//
// Solidity: function getAlert(uint256 index) view returns((uint256,uint256,bytes32,bytes32,address))
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerCaller) GetAlert(opts *bind.CallOpts, index *big.Int) (IMachOptimismL2OutputAlert, error) {
	var out []interface{}
	err := _ContractMachOptimismZkServiceManager.contract.Call(opts, &out, "getAlert", index)

	if err != nil {
		return *new(IMachOptimismL2OutputAlert), err
	}

	out0 := *abi.ConvertType(out[0], new(IMachOptimismL2OutputAlert)).(*IMachOptimismL2OutputAlert)

	return out0, err

}

// GetAlert is a free data retrieval call binding the contract method 0x85081886.
//
// Solidity: function getAlert(uint256 index) view returns((uint256,uint256,bytes32,bytes32,address))
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerSession) GetAlert(index *big.Int) (IMachOptimismL2OutputAlert, error) {
	return _ContractMachOptimismZkServiceManager.Contract.GetAlert(&_ContractMachOptimismZkServiceManager.CallOpts, index)
}

// GetAlert is a free data retrieval call binding the contract method 0x85081886.
//
// Solidity: function getAlert(uint256 index) view returns((uint256,uint256,bytes32,bytes32,address))
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerCallerSession) GetAlert(index *big.Int) (IMachOptimismL2OutputAlert, error) {
	return _ContractMachOptimismZkServiceManager.Contract.GetAlert(&_ContractMachOptimismZkServiceManager.CallOpts, index)
}

// GetAlertsLength is a free data retrieval call binding the contract method 0xf926337b.
//
// Solidity: function getAlertsLength() view returns(uint256)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerCaller) GetAlertsLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ContractMachOptimismZkServiceManager.contract.Call(opts, &out, "getAlertsLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAlertsLength is a free data retrieval call binding the contract method 0xf926337b.
//
// Solidity: function getAlertsLength() view returns(uint256)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerSession) GetAlertsLength() (*big.Int, error) {
	return _ContractMachOptimismZkServiceManager.Contract.GetAlertsLength(&_ContractMachOptimismZkServiceManager.CallOpts)
}

// GetAlertsLength is a free data retrieval call binding the contract method 0xf926337b.
//
// Solidity: function getAlertsLength() view returns(uint256)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerCallerSession) GetAlertsLength() (*big.Int, error) {
	return _ContractMachOptimismZkServiceManager.Contract.GetAlertsLength(&_ContractMachOptimismZkServiceManager.CallOpts)
}

// GetOperatorRestakedStrategies is a free data retrieval call binding the contract method 0x33cfb7b7.
//
// Solidity: function getOperatorRestakedStrategies(address operator) view returns(address[])
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerCaller) GetOperatorRestakedStrategies(opts *bind.CallOpts, operator common.Address) ([]common.Address, error) {
	var out []interface{}
	err := _ContractMachOptimismZkServiceManager.contract.Call(opts, &out, "getOperatorRestakedStrategies", operator)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetOperatorRestakedStrategies is a free data retrieval call binding the contract method 0x33cfb7b7.
//
// Solidity: function getOperatorRestakedStrategies(address operator) view returns(address[])
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerSession) GetOperatorRestakedStrategies(operator common.Address) ([]common.Address, error) {
	return _ContractMachOptimismZkServiceManager.Contract.GetOperatorRestakedStrategies(&_ContractMachOptimismZkServiceManager.CallOpts, operator)
}

// GetOperatorRestakedStrategies is a free data retrieval call binding the contract method 0x33cfb7b7.
//
// Solidity: function getOperatorRestakedStrategies(address operator) view returns(address[])
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerCallerSession) GetOperatorRestakedStrategies(operator common.Address) ([]common.Address, error) {
	return _ContractMachOptimismZkServiceManager.Contract.GetOperatorRestakedStrategies(&_ContractMachOptimismZkServiceManager.CallOpts, operator)
}

// GetRegistryCoordinatorAddress is a free data retrieval call binding the contract method 0x5136a08a.
//
// Solidity: function getRegistryCoordinatorAddress() view returns(address)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerCaller) GetRegistryCoordinatorAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractMachOptimismZkServiceManager.contract.Call(opts, &out, "getRegistryCoordinatorAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRegistryCoordinatorAddress is a free data retrieval call binding the contract method 0x5136a08a.
//
// Solidity: function getRegistryCoordinatorAddress() view returns(address)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerSession) GetRegistryCoordinatorAddress() (common.Address, error) {
	return _ContractMachOptimismZkServiceManager.Contract.GetRegistryCoordinatorAddress(&_ContractMachOptimismZkServiceManager.CallOpts)
}

// GetRegistryCoordinatorAddress is a free data retrieval call binding the contract method 0x5136a08a.
//
// Solidity: function getRegistryCoordinatorAddress() view returns(address)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerCallerSession) GetRegistryCoordinatorAddress() (common.Address, error) {
	return _ContractMachOptimismZkServiceManager.Contract.GetRegistryCoordinatorAddress(&_ContractMachOptimismZkServiceManager.CallOpts)
}

// GetRestakeableStrategies is a free data retrieval call binding the contract method 0xe481af9d.
//
// Solidity: function getRestakeableStrategies() view returns(address[])
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerCaller) GetRestakeableStrategies(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _ContractMachOptimismZkServiceManager.contract.Call(opts, &out, "getRestakeableStrategies")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetRestakeableStrategies is a free data retrieval call binding the contract method 0xe481af9d.
//
// Solidity: function getRestakeableStrategies() view returns(address[])
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerSession) GetRestakeableStrategies() ([]common.Address, error) {
	return _ContractMachOptimismZkServiceManager.Contract.GetRestakeableStrategies(&_ContractMachOptimismZkServiceManager.CallOpts)
}

// GetRestakeableStrategies is a free data retrieval call binding the contract method 0xe481af9d.
//
// Solidity: function getRestakeableStrategies() view returns(address[])
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerCallerSession) GetRestakeableStrategies() ([]common.Address, error) {
	return _ContractMachOptimismZkServiceManager.Contract.GetRestakeableStrategies(&_ContractMachOptimismZkServiceManager.CallOpts)
}

// ImageId is a free data retrieval call binding the contract method 0xef3f7dd5.
//
// Solidity: function imageId() view returns(bytes32)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerCaller) ImageId(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ContractMachOptimismZkServiceManager.contract.Call(opts, &out, "imageId")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ImageId is a free data retrieval call binding the contract method 0xef3f7dd5.
//
// Solidity: function imageId() view returns(bytes32)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerSession) ImageId() ([32]byte, error) {
	return _ContractMachOptimismZkServiceManager.Contract.ImageId(&_ContractMachOptimismZkServiceManager.CallOpts)
}

// ImageId is a free data retrieval call binding the contract method 0xef3f7dd5.
//
// Solidity: function imageId() view returns(bytes32)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerCallerSession) ImageId() ([32]byte, error) {
	return _ContractMachOptimismZkServiceManager.Contract.ImageId(&_ContractMachOptimismZkServiceManager.CallOpts)
}

// L2OutputOracle is a free data retrieval call binding the contract method 0x4d9f1559.
//
// Solidity: function l2OutputOracle() view returns(address)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerCaller) L2OutputOracle(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractMachOptimismZkServiceManager.contract.Call(opts, &out, "l2OutputOracle")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// L2OutputOracle is a free data retrieval call binding the contract method 0x4d9f1559.
//
// Solidity: function l2OutputOracle() view returns(address)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerSession) L2OutputOracle() (common.Address, error) {
	return _ContractMachOptimismZkServiceManager.Contract.L2OutputOracle(&_ContractMachOptimismZkServiceManager.CallOpts)
}

// L2OutputOracle is a free data retrieval call binding the contract method 0x4d9f1559.
//
// Solidity: function l2OutputOracle() view returns(address)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerCallerSession) L2OutputOracle() (common.Address, error) {
	return _ContractMachOptimismZkServiceManager.Contract.L2OutputOracle(&_ContractMachOptimismZkServiceManager.CallOpts)
}

// LatestAlertBlockNumber is a free data retrieval call binding the contract method 0xe6251872.
//
// Solidity: function latestAlertBlockNumber() view returns(uint256)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerCaller) LatestAlertBlockNumber(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ContractMachOptimismZkServiceManager.contract.Call(opts, &out, "latestAlertBlockNumber")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LatestAlertBlockNumber is a free data retrieval call binding the contract method 0xe6251872.
//
// Solidity: function latestAlertBlockNumber() view returns(uint256)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerSession) LatestAlertBlockNumber() (*big.Int, error) {
	return _ContractMachOptimismZkServiceManager.Contract.LatestAlertBlockNumber(&_ContractMachOptimismZkServiceManager.CallOpts)
}

// LatestAlertBlockNumber is a free data retrieval call binding the contract method 0xe6251872.
//
// Solidity: function latestAlertBlockNumber() view returns(uint256)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerCallerSession) LatestAlertBlockNumber() (*big.Int, error) {
	return _ContractMachOptimismZkServiceManager.Contract.LatestAlertBlockNumber(&_ContractMachOptimismZkServiceManager.CallOpts)
}

// LatestUnprovedBlockNumber is a free data retrieval call binding the contract method 0xebf8792b.
//
// Solidity: function latestUnprovedBlockNumber() view returns(uint256)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerCaller) LatestUnprovedBlockNumber(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ContractMachOptimismZkServiceManager.contract.Call(opts, &out, "latestUnprovedBlockNumber")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LatestUnprovedBlockNumber is a free data retrieval call binding the contract method 0xebf8792b.
//
// Solidity: function latestUnprovedBlockNumber() view returns(uint256)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerSession) LatestUnprovedBlockNumber() (*big.Int, error) {
	return _ContractMachOptimismZkServiceManager.Contract.LatestUnprovedBlockNumber(&_ContractMachOptimismZkServiceManager.CallOpts)
}

// LatestUnprovedBlockNumber is a free data retrieval call binding the contract method 0xebf8792b.
//
// Solidity: function latestUnprovedBlockNumber() view returns(uint256)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerCallerSession) LatestUnprovedBlockNumber() (*big.Int, error) {
	return _ContractMachOptimismZkServiceManager.Contract.LatestUnprovedBlockNumber(&_ContractMachOptimismZkServiceManager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractMachOptimismZkServiceManager.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerSession) Owner() (common.Address, error) {
	return _ContractMachOptimismZkServiceManager.Contract.Owner(&_ContractMachOptimismZkServiceManager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerCallerSession) Owner() (common.Address, error) {
	return _ContractMachOptimismZkServiceManager.Contract.Owner(&_ContractMachOptimismZkServiceManager.CallOpts)
}

// ProvedIndex is a free data retrieval call binding the contract method 0x06ccde3a.
//
// Solidity: function provedIndex() view returns(uint256)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerCaller) ProvedIndex(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ContractMachOptimismZkServiceManager.contract.Call(opts, &out, "provedIndex")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ProvedIndex is a free data retrieval call binding the contract method 0x06ccde3a.
//
// Solidity: function provedIndex() view returns(uint256)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerSession) ProvedIndex() (*big.Int, error) {
	return _ContractMachOptimismZkServiceManager.Contract.ProvedIndex(&_ContractMachOptimismZkServiceManager.CallOpts)
}

// ProvedIndex is a free data retrieval call binding the contract method 0x06ccde3a.
//
// Solidity: function provedIndex() view returns(uint256)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerCallerSession) ProvedIndex() (*big.Int, error) {
	return _ContractMachOptimismZkServiceManager.Contract.ProvedIndex(&_ContractMachOptimismZkServiceManager.CallOpts)
}

// RollupChainID is a free data retrieval call binding the contract method 0xfc51ecae.
//
// Solidity: function rollupChainID() view returns(uint256)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerCaller) RollupChainID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ContractMachOptimismZkServiceManager.contract.Call(opts, &out, "rollupChainID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RollupChainID is a free data retrieval call binding the contract method 0xfc51ecae.
//
// Solidity: function rollupChainID() view returns(uint256)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerSession) RollupChainID() (*big.Int, error) {
	return _ContractMachOptimismZkServiceManager.Contract.RollupChainID(&_ContractMachOptimismZkServiceManager.CallOpts)
}

// RollupChainID is a free data retrieval call binding the contract method 0xfc51ecae.
//
// Solidity: function rollupChainID() view returns(uint256)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerCallerSession) RollupChainID() (*big.Int, error) {
	return _ContractMachOptimismZkServiceManager.Contract.RollupChainID(&_ContractMachOptimismZkServiceManager.CallOpts)
}

// SettlementChainID is a free data retrieval call binding the contract method 0x22623897.
//
// Solidity: function settlementChainID() view returns(uint256)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerCaller) SettlementChainID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ContractMachOptimismZkServiceManager.contract.Call(opts, &out, "settlementChainID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SettlementChainID is a free data retrieval call binding the contract method 0x22623897.
//
// Solidity: function settlementChainID() view returns(uint256)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerSession) SettlementChainID() (*big.Int, error) {
	return _ContractMachOptimismZkServiceManager.Contract.SettlementChainID(&_ContractMachOptimismZkServiceManager.CallOpts)
}

// SettlementChainID is a free data retrieval call binding the contract method 0x22623897.
//
// Solidity: function settlementChainID() view returns(uint256)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerCallerSession) SettlementChainID() (*big.Int, error) {
	return _ContractMachOptimismZkServiceManager.Contract.SettlementChainID(&_ContractMachOptimismZkServiceManager.CallOpts)
}

// Verifier is a free data retrieval call binding the contract method 0x2b7ac3f3.
//
// Solidity: function verifier() view returns(address)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerCaller) Verifier(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractMachOptimismZkServiceManager.contract.Call(opts, &out, "verifier")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Verifier is a free data retrieval call binding the contract method 0x2b7ac3f3.
//
// Solidity: function verifier() view returns(address)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerSession) Verifier() (common.Address, error) {
	return _ContractMachOptimismZkServiceManager.Contract.Verifier(&_ContractMachOptimismZkServiceManager.CallOpts)
}

// Verifier is a free data retrieval call binding the contract method 0x2b7ac3f3.
//
// Solidity: function verifier() view returns(address)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerCallerSession) Verifier() (common.Address, error) {
	return _ContractMachOptimismZkServiceManager.Contract.Verifier(&_ContractMachOptimismZkServiceManager.CallOpts)
}

// AlertBlockMismatch is a paid mutator transaction binding the contract method 0xd94c50f9.
//
// Solidity: function alertBlockMismatch(bytes32 invalidOutputRoot, bytes32 expectOutputRoot, uint256 l2BlockNumber) returns()
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerTransactor) AlertBlockMismatch(opts *bind.TransactOpts, invalidOutputRoot [32]byte, expectOutputRoot [32]byte, l2BlockNumber *big.Int) (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.contract.Transact(opts, "alertBlockMismatch", invalidOutputRoot, expectOutputRoot, l2BlockNumber)
}

// AlertBlockMismatch is a paid mutator transaction binding the contract method 0xd94c50f9.
//
// Solidity: function alertBlockMismatch(bytes32 invalidOutputRoot, bytes32 expectOutputRoot, uint256 l2BlockNumber) returns()
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerSession) AlertBlockMismatch(invalidOutputRoot [32]byte, expectOutputRoot [32]byte, l2BlockNumber *big.Int) (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.Contract.AlertBlockMismatch(&_ContractMachOptimismZkServiceManager.TransactOpts, invalidOutputRoot, expectOutputRoot, l2BlockNumber)
}

// AlertBlockMismatch is a paid mutator transaction binding the contract method 0xd94c50f9.
//
// Solidity: function alertBlockMismatch(bytes32 invalidOutputRoot, bytes32 expectOutputRoot, uint256 l2BlockNumber) returns()
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerTransactorSession) AlertBlockMismatch(invalidOutputRoot [32]byte, expectOutputRoot [32]byte, l2BlockNumber *big.Int) (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.Contract.AlertBlockMismatch(&_ContractMachOptimismZkServiceManager.TransactOpts, invalidOutputRoot, expectOutputRoot, l2BlockNumber)
}

// AlertBlockOutputOracleMismatch is a paid mutator transaction binding the contract method 0x7852f6cd.
//
// Solidity: function alertBlockOutputOracleMismatch(uint256 invalidOutputIndex, bytes32 expectOutputRoot) returns()
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerTransactor) AlertBlockOutputOracleMismatch(opts *bind.TransactOpts, invalidOutputIndex *big.Int, expectOutputRoot [32]byte) (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.contract.Transact(opts, "alertBlockOutputOracleMismatch", invalidOutputIndex, expectOutputRoot)
}

// AlertBlockOutputOracleMismatch is a paid mutator transaction binding the contract method 0x7852f6cd.
//
// Solidity: function alertBlockOutputOracleMismatch(uint256 invalidOutputIndex, bytes32 expectOutputRoot) returns()
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerSession) AlertBlockOutputOracleMismatch(invalidOutputIndex *big.Int, expectOutputRoot [32]byte) (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.Contract.AlertBlockOutputOracleMismatch(&_ContractMachOptimismZkServiceManager.TransactOpts, invalidOutputIndex, expectOutputRoot)
}

// AlertBlockOutputOracleMismatch is a paid mutator transaction binding the contract method 0x7852f6cd.
//
// Solidity: function alertBlockOutputOracleMismatch(uint256 invalidOutputIndex, bytes32 expectOutputRoot) returns()
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerTransactorSession) AlertBlockOutputOracleMismatch(invalidOutputIndex *big.Int, expectOutputRoot [32]byte) (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.Contract.AlertBlockOutputOracleMismatch(&_ContractMachOptimismZkServiceManager.TransactOpts, invalidOutputIndex, expectOutputRoot)
}

// ClearAlerts is a paid mutator transaction binding the contract method 0x26bbd906.
//
// Solidity: function clearAlerts() returns()
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerTransactor) ClearAlerts(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.contract.Transact(opts, "clearAlerts")
}

// ClearAlerts is a paid mutator transaction binding the contract method 0x26bbd906.
//
// Solidity: function clearAlerts() returns()
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerSession) ClearAlerts() (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.Contract.ClearAlerts(&_ContractMachOptimismZkServiceManager.TransactOpts)
}

// ClearAlerts is a paid mutator transaction binding the contract method 0x26bbd906.
//
// Solidity: function clearAlerts() returns()
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerTransactorSession) ClearAlerts() (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.Contract.ClearAlerts(&_ContractMachOptimismZkServiceManager.TransactOpts)
}

// ClearBlockAlertsUpTo is a paid mutator transaction binding the contract method 0xcb71f06d.
//
// Solidity: function clearBlockAlertsUpTo(uint256 l2BlockNumber) returns()
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerTransactor) ClearBlockAlertsUpTo(opts *bind.TransactOpts, l2BlockNumber *big.Int) (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.contract.Transact(opts, "clearBlockAlertsUpTo", l2BlockNumber)
}

// ClearBlockAlertsUpTo is a paid mutator transaction binding the contract method 0xcb71f06d.
//
// Solidity: function clearBlockAlertsUpTo(uint256 l2BlockNumber) returns()
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerSession) ClearBlockAlertsUpTo(l2BlockNumber *big.Int) (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.Contract.ClearBlockAlertsUpTo(&_ContractMachOptimismZkServiceManager.TransactOpts, l2BlockNumber)
}

// ClearBlockAlertsUpTo is a paid mutator transaction binding the contract method 0xcb71f06d.
//
// Solidity: function clearBlockAlertsUpTo(uint256 l2BlockNumber) returns()
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerTransactorSession) ClearBlockAlertsUpTo(l2BlockNumber *big.Int) (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.Contract.ClearBlockAlertsUpTo(&_ContractMachOptimismZkServiceManager.TransactOpts, l2BlockNumber)
}

// DeregisterOperatorFromAVS is a paid mutator transaction binding the contract method 0xa364f4da.
//
// Solidity: function deregisterOperatorFromAVS(address operator) returns()
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerTransactor) DeregisterOperatorFromAVS(opts *bind.TransactOpts, operator common.Address) (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.contract.Transact(opts, "deregisterOperatorFromAVS", operator)
}

// DeregisterOperatorFromAVS is a paid mutator transaction binding the contract method 0xa364f4da.
//
// Solidity: function deregisterOperatorFromAVS(address operator) returns()
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerSession) DeregisterOperatorFromAVS(operator common.Address) (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.Contract.DeregisterOperatorFromAVS(&_ContractMachOptimismZkServiceManager.TransactOpts, operator)
}

// DeregisterOperatorFromAVS is a paid mutator transaction binding the contract method 0xa364f4da.
//
// Solidity: function deregisterOperatorFromAVS(address operator) returns()
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerTransactorSession) DeregisterOperatorFromAVS(operator common.Address) (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.Contract.DeregisterOperatorFromAVS(&_ContractMachOptimismZkServiceManager.TransactOpts, operator)
}

// Initialize is a paid mutator transaction binding the contract method 0x96c9f17e.
//
// Solidity: function initialize(address contractOwner, bytes32 imageId_, address l2OutputOracle_, address verifier_) returns()
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerTransactor) Initialize(opts *bind.TransactOpts, contractOwner common.Address, imageId_ [32]byte, l2OutputOracle_ common.Address, verifier_ common.Address) (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.contract.Transact(opts, "initialize", contractOwner, imageId_, l2OutputOracle_, verifier_)
}

// Initialize is a paid mutator transaction binding the contract method 0x96c9f17e.
//
// Solidity: function initialize(address contractOwner, bytes32 imageId_, address l2OutputOracle_, address verifier_) returns()
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerSession) Initialize(contractOwner common.Address, imageId_ [32]byte, l2OutputOracle_ common.Address, verifier_ common.Address) (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.Contract.Initialize(&_ContractMachOptimismZkServiceManager.TransactOpts, contractOwner, imageId_, l2OutputOracle_, verifier_)
}

// Initialize is a paid mutator transaction binding the contract method 0x96c9f17e.
//
// Solidity: function initialize(address contractOwner, bytes32 imageId_, address l2OutputOracle_, address verifier_) returns()
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerTransactorSession) Initialize(contractOwner common.Address, imageId_ [32]byte, l2OutputOracle_ common.Address, verifier_ common.Address) (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.Contract.Initialize(&_ContractMachOptimismZkServiceManager.TransactOpts, contractOwner, imageId_, l2OutputOracle_, verifier_)
}

// RegisterOperatorToAVS is a paid mutator transaction binding the contract method 0x9926ee7d.
//
// Solidity: function registerOperatorToAVS(address operator, (bytes,bytes32,uint256) operatorSignature) returns()
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerTransactor) RegisterOperatorToAVS(opts *bind.TransactOpts, operator common.Address, operatorSignature ISignatureUtilsSignatureWithSaltAndExpiry) (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.contract.Transact(opts, "registerOperatorToAVS", operator, operatorSignature)
}

// RegisterOperatorToAVS is a paid mutator transaction binding the contract method 0x9926ee7d.
//
// Solidity: function registerOperatorToAVS(address operator, (bytes,bytes32,uint256) operatorSignature) returns()
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerSession) RegisterOperatorToAVS(operator common.Address, operatorSignature ISignatureUtilsSignatureWithSaltAndExpiry) (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.Contract.RegisterOperatorToAVS(&_ContractMachOptimismZkServiceManager.TransactOpts, operator, operatorSignature)
}

// RegisterOperatorToAVS is a paid mutator transaction binding the contract method 0x9926ee7d.
//
// Solidity: function registerOperatorToAVS(address operator, (bytes,bytes32,uint256) operatorSignature) returns()
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerTransactorSession) RegisterOperatorToAVS(operator common.Address, operatorSignature ISignatureUtilsSignatureWithSaltAndExpiry) (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.Contract.RegisterOperatorToAVS(&_ContractMachOptimismZkServiceManager.TransactOpts, operator, operatorSignature)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerSession) RenounceOwnership() (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.Contract.RenounceOwnership(&_ContractMachOptimismZkServiceManager.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.Contract.RenounceOwnership(&_ContractMachOptimismZkServiceManager.TransactOpts)
}

// SetImageId is a paid mutator transaction binding the contract method 0x901129c2.
//
// Solidity: function setImageId(bytes32 imageId_) returns()
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerTransactor) SetImageId(opts *bind.TransactOpts, imageId_ [32]byte) (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.contract.Transact(opts, "setImageId", imageId_)
}

// SetImageId is a paid mutator transaction binding the contract method 0x901129c2.
//
// Solidity: function setImageId(bytes32 imageId_) returns()
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerSession) SetImageId(imageId_ [32]byte) (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.Contract.SetImageId(&_ContractMachOptimismZkServiceManager.TransactOpts, imageId_)
}

// SetImageId is a paid mutator transaction binding the contract method 0x901129c2.
//
// Solidity: function setImageId(bytes32 imageId_) returns()
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerTransactorSession) SetImageId(imageId_ [32]byte) (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.Contract.SetImageId(&_ContractMachOptimismZkServiceManager.TransactOpts, imageId_)
}

// SetRiscZeroVerifier is a paid mutator transaction binding the contract method 0xd4034007.
//
// Solidity: function setRiscZeroVerifier(address verifier_) returns()
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerTransactor) SetRiscZeroVerifier(opts *bind.TransactOpts, verifier_ common.Address) (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.contract.Transact(opts, "setRiscZeroVerifier", verifier_)
}

// SetRiscZeroVerifier is a paid mutator transaction binding the contract method 0xd4034007.
//
// Solidity: function setRiscZeroVerifier(address verifier_) returns()
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerSession) SetRiscZeroVerifier(verifier_ common.Address) (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.Contract.SetRiscZeroVerifier(&_ContractMachOptimismZkServiceManager.TransactOpts, verifier_)
}

// SetRiscZeroVerifier is a paid mutator transaction binding the contract method 0xd4034007.
//
// Solidity: function setRiscZeroVerifier(address verifier_) returns()
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerTransactorSession) SetRiscZeroVerifier(verifier_ common.Address) (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.Contract.SetRiscZeroVerifier(&_ContractMachOptimismZkServiceManager.TransactOpts, verifier_)
}

// SubmitProve is a paid mutator transaction binding the contract method 0x4b4b0325.
//
// Solidity: function submitProve(bytes32 imageId_, bytes journal, bytes seal, bytes32 postStateDigest, uint256 l2OutputIndex) returns()
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerTransactor) SubmitProve(opts *bind.TransactOpts, imageId_ [32]byte, journal []byte, seal []byte, postStateDigest [32]byte, l2OutputIndex *big.Int) (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.contract.Transact(opts, "submitProve", imageId_, journal, seal, postStateDigest, l2OutputIndex)
}

// SubmitProve is a paid mutator transaction binding the contract method 0x4b4b0325.
//
// Solidity: function submitProve(bytes32 imageId_, bytes journal, bytes seal, bytes32 postStateDigest, uint256 l2OutputIndex) returns()
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerSession) SubmitProve(imageId_ [32]byte, journal []byte, seal []byte, postStateDigest [32]byte, l2OutputIndex *big.Int) (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.Contract.SubmitProve(&_ContractMachOptimismZkServiceManager.TransactOpts, imageId_, journal, seal, postStateDigest, l2OutputIndex)
}

// SubmitProve is a paid mutator transaction binding the contract method 0x4b4b0325.
//
// Solidity: function submitProve(bytes32 imageId_, bytes journal, bytes seal, bytes32 postStateDigest, uint256 l2OutputIndex) returns()
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerTransactorSession) SubmitProve(imageId_ [32]byte, journal []byte, seal []byte, postStateDigest [32]byte, l2OutputIndex *big.Int) (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.Contract.SubmitProve(&_ContractMachOptimismZkServiceManager.TransactOpts, imageId_, journal, seal, postStateDigest, l2OutputIndex)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.Contract.TransferOwnership(&_ContractMachOptimismZkServiceManager.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.Contract.TransferOwnership(&_ContractMachOptimismZkServiceManager.TransactOpts, newOwner)
}

// UpdateAVSMetadataURI is a paid mutator transaction binding the contract method 0xa98fb355.
//
// Solidity: function updateAVSMetadataURI(string _metadataURI) returns()
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerTransactor) UpdateAVSMetadataURI(opts *bind.TransactOpts, _metadataURI string) (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.contract.Transact(opts, "updateAVSMetadataURI", _metadataURI)
}

// UpdateAVSMetadataURI is a paid mutator transaction binding the contract method 0xa98fb355.
//
// Solidity: function updateAVSMetadataURI(string _metadataURI) returns()
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerSession) UpdateAVSMetadataURI(_metadataURI string) (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.Contract.UpdateAVSMetadataURI(&_ContractMachOptimismZkServiceManager.TransactOpts, _metadataURI)
}

// UpdateAVSMetadataURI is a paid mutator transaction binding the contract method 0xa98fb355.
//
// Solidity: function updateAVSMetadataURI(string _metadataURI) returns()
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerTransactorSession) UpdateAVSMetadataURI(_metadataURI string) (*types.Transaction, error) {
	return _ContractMachOptimismZkServiceManager.Contract.UpdateAVSMetadataURI(&_ContractMachOptimismZkServiceManager.TransactOpts, _metadataURI)
}

// ContractMachOptimismZkServiceManagerAlertBlockMismatchIterator is returned from FilterAlertBlockMismatch and is used to iterate over the raw logs and unpacked data for AlertBlockMismatch events raised by the ContractMachOptimismZkServiceManager contract.
type ContractMachOptimismZkServiceManagerAlertBlockMismatchIterator struct {
	Event *ContractMachOptimismZkServiceManagerAlertBlockMismatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractMachOptimismZkServiceManagerAlertBlockMismatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractMachOptimismZkServiceManagerAlertBlockMismatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractMachOptimismZkServiceManagerAlertBlockMismatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractMachOptimismZkServiceManagerAlertBlockMismatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractMachOptimismZkServiceManagerAlertBlockMismatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractMachOptimismZkServiceManagerAlertBlockMismatch represents a AlertBlockMismatch event raised by the ContractMachOptimismZkServiceManager contract.
type ContractMachOptimismZkServiceManagerAlertBlockMismatch struct {
	InvalidOutputRoot [32]byte
	ExpectOutputRoot  [32]byte
	L2BlockNumber     *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterAlertBlockMismatch is a free log retrieval operation binding the contract event 0x72025bfbd961ed777ed0367a97f4056b2a4e75651b1d12c67ac9722309aaed15.
//
// Solidity: event AlertBlockMismatch(bytes32 invalidOutputRoot, bytes32 expectOutputRoot, uint256 indexed l2BlockNumber)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerFilterer) FilterAlertBlockMismatch(opts *bind.FilterOpts, l2BlockNumber []*big.Int) (*ContractMachOptimismZkServiceManagerAlertBlockMismatchIterator, error) {

	var l2BlockNumberRule []interface{}
	for _, l2BlockNumberItem := range l2BlockNumber {
		l2BlockNumberRule = append(l2BlockNumberRule, l2BlockNumberItem)
	}

	logs, sub, err := _ContractMachOptimismZkServiceManager.contract.FilterLogs(opts, "AlertBlockMismatch", l2BlockNumberRule)
	if err != nil {
		return nil, err
	}
	return &ContractMachOptimismZkServiceManagerAlertBlockMismatchIterator{contract: _ContractMachOptimismZkServiceManager.contract, event: "AlertBlockMismatch", logs: logs, sub: sub}, nil
}

// WatchAlertBlockMismatch is a free log subscription operation binding the contract event 0x72025bfbd961ed777ed0367a97f4056b2a4e75651b1d12c67ac9722309aaed15.
//
// Solidity: event AlertBlockMismatch(bytes32 invalidOutputRoot, bytes32 expectOutputRoot, uint256 indexed l2BlockNumber)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerFilterer) WatchAlertBlockMismatch(opts *bind.WatchOpts, sink chan<- *ContractMachOptimismZkServiceManagerAlertBlockMismatch, l2BlockNumber []*big.Int) (event.Subscription, error) {

	var l2BlockNumberRule []interface{}
	for _, l2BlockNumberItem := range l2BlockNumber {
		l2BlockNumberRule = append(l2BlockNumberRule, l2BlockNumberItem)
	}

	logs, sub, err := _ContractMachOptimismZkServiceManager.contract.WatchLogs(opts, "AlertBlockMismatch", l2BlockNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractMachOptimismZkServiceManagerAlertBlockMismatch)
				if err := _ContractMachOptimismZkServiceManager.contract.UnpackLog(event, "AlertBlockMismatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAlertBlockMismatch is a log parse operation binding the contract event 0x72025bfbd961ed777ed0367a97f4056b2a4e75651b1d12c67ac9722309aaed15.
//
// Solidity: event AlertBlockMismatch(bytes32 invalidOutputRoot, bytes32 expectOutputRoot, uint256 indexed l2BlockNumber)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerFilterer) ParseAlertBlockMismatch(log types.Log) (*ContractMachOptimismZkServiceManagerAlertBlockMismatch, error) {
	event := new(ContractMachOptimismZkServiceManagerAlertBlockMismatch)
	if err := _ContractMachOptimismZkServiceManager.contract.UnpackLog(event, "AlertBlockMismatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractMachOptimismZkServiceManagerAlertBlockOutputOracleMismatchIterator is returned from FilterAlertBlockOutputOracleMismatch and is used to iterate over the raw logs and unpacked data for AlertBlockOutputOracleMismatch events raised by the ContractMachOptimismZkServiceManager contract.
type ContractMachOptimismZkServiceManagerAlertBlockOutputOracleMismatchIterator struct {
	Event *ContractMachOptimismZkServiceManagerAlertBlockOutputOracleMismatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractMachOptimismZkServiceManagerAlertBlockOutputOracleMismatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractMachOptimismZkServiceManagerAlertBlockOutputOracleMismatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractMachOptimismZkServiceManagerAlertBlockOutputOracleMismatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractMachOptimismZkServiceManagerAlertBlockOutputOracleMismatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractMachOptimismZkServiceManagerAlertBlockOutputOracleMismatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractMachOptimismZkServiceManagerAlertBlockOutputOracleMismatch represents a AlertBlockOutputOracleMismatch event raised by the ContractMachOptimismZkServiceManager contract.
type ContractMachOptimismZkServiceManagerAlertBlockOutputOracleMismatch struct {
	InvalidOutputIndex *big.Int
	InvalidOutputRoot  [32]byte
	ExpectOutputRoot   [32]byte
	L2BlockNumber      *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterAlertBlockOutputOracleMismatch is a free log retrieval operation binding the contract event 0xfb94279474deafe440aa268ffe2ed9ee06c6b9805237947f03a0825dea009a61.
//
// Solidity: event AlertBlockOutputOracleMismatch(uint256 indexed invalidOutputIndex, bytes32 invalidOutputRoot, bytes32 expectOutputRoot, uint256 indexed l2BlockNumber)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerFilterer) FilterAlertBlockOutputOracleMismatch(opts *bind.FilterOpts, invalidOutputIndex []*big.Int, l2BlockNumber []*big.Int) (*ContractMachOptimismZkServiceManagerAlertBlockOutputOracleMismatchIterator, error) {

	var invalidOutputIndexRule []interface{}
	for _, invalidOutputIndexItem := range invalidOutputIndex {
		invalidOutputIndexRule = append(invalidOutputIndexRule, invalidOutputIndexItem)
	}

	var l2BlockNumberRule []interface{}
	for _, l2BlockNumberItem := range l2BlockNumber {
		l2BlockNumberRule = append(l2BlockNumberRule, l2BlockNumberItem)
	}

	logs, sub, err := _ContractMachOptimismZkServiceManager.contract.FilterLogs(opts, "AlertBlockOutputOracleMismatch", invalidOutputIndexRule, l2BlockNumberRule)
	if err != nil {
		return nil, err
	}
	return &ContractMachOptimismZkServiceManagerAlertBlockOutputOracleMismatchIterator{contract: _ContractMachOptimismZkServiceManager.contract, event: "AlertBlockOutputOracleMismatch", logs: logs, sub: sub}, nil
}

// WatchAlertBlockOutputOracleMismatch is a free log subscription operation binding the contract event 0xfb94279474deafe440aa268ffe2ed9ee06c6b9805237947f03a0825dea009a61.
//
// Solidity: event AlertBlockOutputOracleMismatch(uint256 indexed invalidOutputIndex, bytes32 invalidOutputRoot, bytes32 expectOutputRoot, uint256 indexed l2BlockNumber)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerFilterer) WatchAlertBlockOutputOracleMismatch(opts *bind.WatchOpts, sink chan<- *ContractMachOptimismZkServiceManagerAlertBlockOutputOracleMismatch, invalidOutputIndex []*big.Int, l2BlockNumber []*big.Int) (event.Subscription, error) {

	var invalidOutputIndexRule []interface{}
	for _, invalidOutputIndexItem := range invalidOutputIndex {
		invalidOutputIndexRule = append(invalidOutputIndexRule, invalidOutputIndexItem)
	}

	var l2BlockNumberRule []interface{}
	for _, l2BlockNumberItem := range l2BlockNumber {
		l2BlockNumberRule = append(l2BlockNumberRule, l2BlockNumberItem)
	}

	logs, sub, err := _ContractMachOptimismZkServiceManager.contract.WatchLogs(opts, "AlertBlockOutputOracleMismatch", invalidOutputIndexRule, l2BlockNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractMachOptimismZkServiceManagerAlertBlockOutputOracleMismatch)
				if err := _ContractMachOptimismZkServiceManager.contract.UnpackLog(event, "AlertBlockOutputOracleMismatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAlertBlockOutputOracleMismatch is a log parse operation binding the contract event 0xfb94279474deafe440aa268ffe2ed9ee06c6b9805237947f03a0825dea009a61.
//
// Solidity: event AlertBlockOutputOracleMismatch(uint256 indexed invalidOutputIndex, bytes32 invalidOutputRoot, bytes32 expectOutputRoot, uint256 indexed l2BlockNumber)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerFilterer) ParseAlertBlockOutputOracleMismatch(log types.Log) (*ContractMachOptimismZkServiceManagerAlertBlockOutputOracleMismatch, error) {
	event := new(ContractMachOptimismZkServiceManagerAlertBlockOutputOracleMismatch)
	if err := _ContractMachOptimismZkServiceManager.contract.UnpackLog(event, "AlertBlockOutputOracleMismatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractMachOptimismZkServiceManagerAlertDeleteIterator is returned from FilterAlertDelete and is used to iterate over the raw logs and unpacked data for AlertDelete events raised by the ContractMachOptimismZkServiceManager contract.
type ContractMachOptimismZkServiceManagerAlertDeleteIterator struct {
	Event *ContractMachOptimismZkServiceManagerAlertDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractMachOptimismZkServiceManagerAlertDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractMachOptimismZkServiceManagerAlertDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractMachOptimismZkServiceManagerAlertDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractMachOptimismZkServiceManagerAlertDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractMachOptimismZkServiceManagerAlertDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractMachOptimismZkServiceManagerAlertDelete represents a AlertDelete event raised by the ContractMachOptimismZkServiceManager contract.
type ContractMachOptimismZkServiceManagerAlertDelete struct {
	InvalidOutputIndex *big.Int
	ExpectOutputRoot   [32]byte
	OutputRoot         [32]byte
	L2BlockNumber      *big.Int
	Submitter          common.Address
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterAlertDelete is a free log retrieval operation binding the contract event 0x408396ca734356c56aefed3f2a3535a73c1b115fdb31824b9d4ce2ff08476c9c.
//
// Solidity: event AlertDelete(uint256 indexed invalidOutputIndex, bytes32 expectOutputRoot, bytes32 OutputRoot, uint256 indexed l2BlockNumber, address indexed submitter)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerFilterer) FilterAlertDelete(opts *bind.FilterOpts, invalidOutputIndex []*big.Int, l2BlockNumber []*big.Int, submitter []common.Address) (*ContractMachOptimismZkServiceManagerAlertDeleteIterator, error) {

	var invalidOutputIndexRule []interface{}
	for _, invalidOutputIndexItem := range invalidOutputIndex {
		invalidOutputIndexRule = append(invalidOutputIndexRule, invalidOutputIndexItem)
	}

	var l2BlockNumberRule []interface{}
	for _, l2BlockNumberItem := range l2BlockNumber {
		l2BlockNumberRule = append(l2BlockNumberRule, l2BlockNumberItem)
	}
	var submitterRule []interface{}
	for _, submitterItem := range submitter {
		submitterRule = append(submitterRule, submitterItem)
	}

	logs, sub, err := _ContractMachOptimismZkServiceManager.contract.FilterLogs(opts, "AlertDelete", invalidOutputIndexRule, l2BlockNumberRule, submitterRule)
	if err != nil {
		return nil, err
	}
	return &ContractMachOptimismZkServiceManagerAlertDeleteIterator{contract: _ContractMachOptimismZkServiceManager.contract, event: "AlertDelete", logs: logs, sub: sub}, nil
}

// WatchAlertDelete is a free log subscription operation binding the contract event 0x408396ca734356c56aefed3f2a3535a73c1b115fdb31824b9d4ce2ff08476c9c.
//
// Solidity: event AlertDelete(uint256 indexed invalidOutputIndex, bytes32 expectOutputRoot, bytes32 OutputRoot, uint256 indexed l2BlockNumber, address indexed submitter)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerFilterer) WatchAlertDelete(opts *bind.WatchOpts, sink chan<- *ContractMachOptimismZkServiceManagerAlertDelete, invalidOutputIndex []*big.Int, l2BlockNumber []*big.Int, submitter []common.Address) (event.Subscription, error) {

	var invalidOutputIndexRule []interface{}
	for _, invalidOutputIndexItem := range invalidOutputIndex {
		invalidOutputIndexRule = append(invalidOutputIndexRule, invalidOutputIndexItem)
	}

	var l2BlockNumberRule []interface{}
	for _, l2BlockNumberItem := range l2BlockNumber {
		l2BlockNumberRule = append(l2BlockNumberRule, l2BlockNumberItem)
	}
	var submitterRule []interface{}
	for _, submitterItem := range submitter {
		submitterRule = append(submitterRule, submitterItem)
	}

	logs, sub, err := _ContractMachOptimismZkServiceManager.contract.WatchLogs(opts, "AlertDelete", invalidOutputIndexRule, l2BlockNumberRule, submitterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractMachOptimismZkServiceManagerAlertDelete)
				if err := _ContractMachOptimismZkServiceManager.contract.UnpackLog(event, "AlertDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAlertDelete is a log parse operation binding the contract event 0x408396ca734356c56aefed3f2a3535a73c1b115fdb31824b9d4ce2ff08476c9c.
//
// Solidity: event AlertDelete(uint256 indexed invalidOutputIndex, bytes32 expectOutputRoot, bytes32 OutputRoot, uint256 indexed l2BlockNumber, address indexed submitter)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerFilterer) ParseAlertDelete(log types.Log) (*ContractMachOptimismZkServiceManagerAlertDelete, error) {
	event := new(ContractMachOptimismZkServiceManagerAlertDelete)
	if err := _ContractMachOptimismZkServiceManager.contract.UnpackLog(event, "AlertDelete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractMachOptimismZkServiceManagerAlertResetIterator is returned from FilterAlertReset and is used to iterate over the raw logs and unpacked data for AlertReset events raised by the ContractMachOptimismZkServiceManager contract.
type ContractMachOptimismZkServiceManagerAlertResetIterator struct {
	Event *ContractMachOptimismZkServiceManagerAlertReset // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractMachOptimismZkServiceManagerAlertResetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractMachOptimismZkServiceManagerAlertReset)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractMachOptimismZkServiceManagerAlertReset)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractMachOptimismZkServiceManagerAlertResetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractMachOptimismZkServiceManagerAlertResetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractMachOptimismZkServiceManagerAlertReset represents a AlertReset event raised by the ContractMachOptimismZkServiceManager contract.
type ContractMachOptimismZkServiceManagerAlertReset struct {
	InvalidOutputIndex *big.Int
	InvalidOutputRoot  [32]byte
	ExpectOutputRoot   [32]byte
	L2BlockNumber      *big.Int
	FromSubmitter      common.Address
	ToSubmitter        common.Address
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterAlertReset is a free log retrieval operation binding the contract event 0xcb5a8ddfe5a72a6fb9d08f0c6832fd4097a9c52d8dd57385ad4d1bedbec43d2b.
//
// Solidity: event AlertReset(uint256 indexed invalidOutputIndex, bytes32 invalidOutputRoot, bytes32 expectOutputRoot, uint256 indexed l2BlockNumber, address fromSubmitter, address indexed toSubmitter)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerFilterer) FilterAlertReset(opts *bind.FilterOpts, invalidOutputIndex []*big.Int, l2BlockNumber []*big.Int, toSubmitter []common.Address) (*ContractMachOptimismZkServiceManagerAlertResetIterator, error) {

	var invalidOutputIndexRule []interface{}
	for _, invalidOutputIndexItem := range invalidOutputIndex {
		invalidOutputIndexRule = append(invalidOutputIndexRule, invalidOutputIndexItem)
	}

	var l2BlockNumberRule []interface{}
	for _, l2BlockNumberItem := range l2BlockNumber {
		l2BlockNumberRule = append(l2BlockNumberRule, l2BlockNumberItem)
	}

	var toSubmitterRule []interface{}
	for _, toSubmitterItem := range toSubmitter {
		toSubmitterRule = append(toSubmitterRule, toSubmitterItem)
	}

	logs, sub, err := _ContractMachOptimismZkServiceManager.contract.FilterLogs(opts, "AlertReset", invalidOutputIndexRule, l2BlockNumberRule, toSubmitterRule)
	if err != nil {
		return nil, err
	}
	return &ContractMachOptimismZkServiceManagerAlertResetIterator{contract: _ContractMachOptimismZkServiceManager.contract, event: "AlertReset", logs: logs, sub: sub}, nil
}

// WatchAlertReset is a free log subscription operation binding the contract event 0xcb5a8ddfe5a72a6fb9d08f0c6832fd4097a9c52d8dd57385ad4d1bedbec43d2b.
//
// Solidity: event AlertReset(uint256 indexed invalidOutputIndex, bytes32 invalidOutputRoot, bytes32 expectOutputRoot, uint256 indexed l2BlockNumber, address fromSubmitter, address indexed toSubmitter)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerFilterer) WatchAlertReset(opts *bind.WatchOpts, sink chan<- *ContractMachOptimismZkServiceManagerAlertReset, invalidOutputIndex []*big.Int, l2BlockNumber []*big.Int, toSubmitter []common.Address) (event.Subscription, error) {

	var invalidOutputIndexRule []interface{}
	for _, invalidOutputIndexItem := range invalidOutputIndex {
		invalidOutputIndexRule = append(invalidOutputIndexRule, invalidOutputIndexItem)
	}

	var l2BlockNumberRule []interface{}
	for _, l2BlockNumberItem := range l2BlockNumber {
		l2BlockNumberRule = append(l2BlockNumberRule, l2BlockNumberItem)
	}

	var toSubmitterRule []interface{}
	for _, toSubmitterItem := range toSubmitter {
		toSubmitterRule = append(toSubmitterRule, toSubmitterItem)
	}

	logs, sub, err := _ContractMachOptimismZkServiceManager.contract.WatchLogs(opts, "AlertReset", invalidOutputIndexRule, l2BlockNumberRule, toSubmitterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractMachOptimismZkServiceManagerAlertReset)
				if err := _ContractMachOptimismZkServiceManager.contract.UnpackLog(event, "AlertReset", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAlertReset is a log parse operation binding the contract event 0xcb5a8ddfe5a72a6fb9d08f0c6832fd4097a9c52d8dd57385ad4d1bedbec43d2b.
//
// Solidity: event AlertReset(uint256 indexed invalidOutputIndex, bytes32 invalidOutputRoot, bytes32 expectOutputRoot, uint256 indexed l2BlockNumber, address fromSubmitter, address indexed toSubmitter)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerFilterer) ParseAlertReset(log types.Log) (*ContractMachOptimismZkServiceManagerAlertReset, error) {
	event := new(ContractMachOptimismZkServiceManagerAlertReset)
	if err := _ContractMachOptimismZkServiceManager.contract.UnpackLog(event, "AlertReset", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractMachOptimismZkServiceManagerInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the ContractMachOptimismZkServiceManager contract.
type ContractMachOptimismZkServiceManagerInitializedIterator struct {
	Event *ContractMachOptimismZkServiceManagerInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractMachOptimismZkServiceManagerInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractMachOptimismZkServiceManagerInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractMachOptimismZkServiceManagerInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractMachOptimismZkServiceManagerInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractMachOptimismZkServiceManagerInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractMachOptimismZkServiceManagerInitialized represents a Initialized event raised by the ContractMachOptimismZkServiceManager contract.
type ContractMachOptimismZkServiceManagerInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerFilterer) FilterInitialized(opts *bind.FilterOpts) (*ContractMachOptimismZkServiceManagerInitializedIterator, error) {

	logs, sub, err := _ContractMachOptimismZkServiceManager.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ContractMachOptimismZkServiceManagerInitializedIterator{contract: _ContractMachOptimismZkServiceManager.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ContractMachOptimismZkServiceManagerInitialized) (event.Subscription, error) {

	logs, sub, err := _ContractMachOptimismZkServiceManager.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractMachOptimismZkServiceManagerInitialized)
				if err := _ContractMachOptimismZkServiceManager.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerFilterer) ParseInitialized(log types.Log) (*ContractMachOptimismZkServiceManagerInitialized, error) {
	event := new(ContractMachOptimismZkServiceManagerInitialized)
	if err := _ContractMachOptimismZkServiceManager.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractMachOptimismZkServiceManagerOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ContractMachOptimismZkServiceManager contract.
type ContractMachOptimismZkServiceManagerOwnershipTransferredIterator struct {
	Event *ContractMachOptimismZkServiceManagerOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractMachOptimismZkServiceManagerOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractMachOptimismZkServiceManagerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractMachOptimismZkServiceManagerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractMachOptimismZkServiceManagerOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractMachOptimismZkServiceManagerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractMachOptimismZkServiceManagerOwnershipTransferred represents a OwnershipTransferred event raised by the ContractMachOptimismZkServiceManager contract.
type ContractMachOptimismZkServiceManagerOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ContractMachOptimismZkServiceManagerOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ContractMachOptimismZkServiceManager.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ContractMachOptimismZkServiceManagerOwnershipTransferredIterator{contract: _ContractMachOptimismZkServiceManager.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ContractMachOptimismZkServiceManagerOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ContractMachOptimismZkServiceManager.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractMachOptimismZkServiceManagerOwnershipTransferred)
				if err := _ContractMachOptimismZkServiceManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerFilterer) ParseOwnershipTransferred(log types.Log) (*ContractMachOptimismZkServiceManagerOwnershipTransferred, error) {
	event := new(ContractMachOptimismZkServiceManagerOwnershipTransferred)
	if err := _ContractMachOptimismZkServiceManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractMachOptimismZkServiceManagerSubmittedBlockProveIterator is returned from FilterSubmittedBlockProve and is used to iterate over the raw logs and unpacked data for SubmittedBlockProve events raised by the ContractMachOptimismZkServiceManager contract.
type ContractMachOptimismZkServiceManagerSubmittedBlockProveIterator struct {
	Event *ContractMachOptimismZkServiceManagerSubmittedBlockProve // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractMachOptimismZkServiceManagerSubmittedBlockProveIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractMachOptimismZkServiceManagerSubmittedBlockProve)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractMachOptimismZkServiceManagerSubmittedBlockProve)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractMachOptimismZkServiceManagerSubmittedBlockProveIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractMachOptimismZkServiceManagerSubmittedBlockProveIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractMachOptimismZkServiceManagerSubmittedBlockProve represents a SubmittedBlockProve event raised by the ContractMachOptimismZkServiceManager contract.
type ContractMachOptimismZkServiceManagerSubmittedBlockProve struct {
	InvalidOutputIndex *big.Int
	OutputRoot         [32]byte
	L2BlockNumber      *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterSubmittedBlockProve is a free log retrieval operation binding the contract event 0xdd6cfadd7c543e03ef0e699385c954bf8b6b87af01b48fa031982257e5f4bc64.
//
// Solidity: event SubmittedBlockProve(uint256 indexed invalidOutputIndex, bytes32 OutputRoot, uint256 indexed l2BlockNumber)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerFilterer) FilterSubmittedBlockProve(opts *bind.FilterOpts, invalidOutputIndex []*big.Int, l2BlockNumber []*big.Int) (*ContractMachOptimismZkServiceManagerSubmittedBlockProveIterator, error) {

	var invalidOutputIndexRule []interface{}
	for _, invalidOutputIndexItem := range invalidOutputIndex {
		invalidOutputIndexRule = append(invalidOutputIndexRule, invalidOutputIndexItem)
	}

	var l2BlockNumberRule []interface{}
	for _, l2BlockNumberItem := range l2BlockNumber {
		l2BlockNumberRule = append(l2BlockNumberRule, l2BlockNumberItem)
	}

	logs, sub, err := _ContractMachOptimismZkServiceManager.contract.FilterLogs(opts, "SubmittedBlockProve", invalidOutputIndexRule, l2BlockNumberRule)
	if err != nil {
		return nil, err
	}
	return &ContractMachOptimismZkServiceManagerSubmittedBlockProveIterator{contract: _ContractMachOptimismZkServiceManager.contract, event: "SubmittedBlockProve", logs: logs, sub: sub}, nil
}

// WatchSubmittedBlockProve is a free log subscription operation binding the contract event 0xdd6cfadd7c543e03ef0e699385c954bf8b6b87af01b48fa031982257e5f4bc64.
//
// Solidity: event SubmittedBlockProve(uint256 indexed invalidOutputIndex, bytes32 OutputRoot, uint256 indexed l2BlockNumber)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerFilterer) WatchSubmittedBlockProve(opts *bind.WatchOpts, sink chan<- *ContractMachOptimismZkServiceManagerSubmittedBlockProve, invalidOutputIndex []*big.Int, l2BlockNumber []*big.Int) (event.Subscription, error) {

	var invalidOutputIndexRule []interface{}
	for _, invalidOutputIndexItem := range invalidOutputIndex {
		invalidOutputIndexRule = append(invalidOutputIndexRule, invalidOutputIndexItem)
	}

	var l2BlockNumberRule []interface{}
	for _, l2BlockNumberItem := range l2BlockNumber {
		l2BlockNumberRule = append(l2BlockNumberRule, l2BlockNumberItem)
	}

	logs, sub, err := _ContractMachOptimismZkServiceManager.contract.WatchLogs(opts, "SubmittedBlockProve", invalidOutputIndexRule, l2BlockNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractMachOptimismZkServiceManagerSubmittedBlockProve)
				if err := _ContractMachOptimismZkServiceManager.contract.UnpackLog(event, "SubmittedBlockProve", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSubmittedBlockProve is a log parse operation binding the contract event 0xdd6cfadd7c543e03ef0e699385c954bf8b6b87af01b48fa031982257e5f4bc64.
//
// Solidity: event SubmittedBlockProve(uint256 indexed invalidOutputIndex, bytes32 OutputRoot, uint256 indexed l2BlockNumber)
func (_ContractMachOptimismZkServiceManager *ContractMachOptimismZkServiceManagerFilterer) ParseSubmittedBlockProve(log types.Log) (*ContractMachOptimismZkServiceManagerSubmittedBlockProve, error) {
	event := new(ContractMachOptimismZkServiceManagerSubmittedBlockProve)
	if err := _ContractMachOptimismZkServiceManager.contract.UnpackLog(event, "SubmittedBlockProve", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
