// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contractMachServiceManager

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// BN254G1Point is an auto generated low-level Go binding around an user-defined struct.
type BN254G1Point struct {
	X *big.Int
	Y *big.Int
}

// BN254G2Point is an auto generated low-level Go binding around an user-defined struct.
type BN254G2Point struct {
	X [2]*big.Int
	Y [2]*big.Int
}

// IBLSSignatureCheckerNonSignerStakesAndSignature is an auto generated low-level Go binding around an user-defined struct.
type IBLSSignatureCheckerNonSignerStakesAndSignature struct {
	NonSignerQuorumBitmapIndices []uint32
	NonSignerPubkeys             []BN254G1Point
	QuorumApks                   []BN254G1Point
	ApkG2                        BN254G2Point
	Sigma                        BN254G1Point
	QuorumApkIndices             []uint32
	TotalStakeIndices            []uint32
	NonSignerStakeIndices        [][]uint32
}

// IBLSSignatureCheckerQuorumStakeTotals is an auto generated low-level Go binding around an user-defined struct.
type IBLSSignatureCheckerQuorumStakeTotals struct {
	SignedStakeForQuorum []*big.Int
	TotalStakeForQuorum  []*big.Int
}

// IMachServiceManagerAlertHeader is an auto generated low-level Go binding around an user-defined struct.
type IMachServiceManagerAlertHeader struct {
	MessageHash                [32]byte
	QuorumNumbers              []byte
	QuorumThresholdPercentages []byte
	ReferenceBlockNumber       uint32
	ExpectOutputRoot           [32]byte
	Journal                    []byte
	Seal                       []byte
	PostStateDigest            [32]byte
	L2OutputIndex              *big.Int
}

// ISignatureUtilsSignatureWithSaltAndExpiry is an auto generated low-level Go binding around an user-defined struct.
type ISignatureUtilsSignatureWithSaltAndExpiry struct {
	Signature []byte
	Salt      [32]byte
	Expiry    *big.Int
}

// ContractMachServiceManagerMetaData contains all meta data concerning the ContractMachServiceManager contract.
var ContractMachServiceManagerMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"__avsDirectory\",\"type\":\"address\",\"internalType\":\"contractIAVSDirectory\"},{\"name\":\"__registryCoordinator\",\"type\":\"address\",\"internalType\":\"contractIRegistryCoordinator\"},{\"name\":\"__stakeRegistry\",\"type\":\"address\",\"internalType\":\"contractIStakeRegistry\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"THRESHOLD_DENOMINATOR\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"addToAllowlist\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"alertConfirmer\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"allowlistEnabled\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"avsDirectory\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"blsApkRegistry\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIBLSApkRegistry\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"checkSignatures\",\"inputs\":[{\"name\":\"msgHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"quorumNumbers\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"referenceBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"params\",\"type\":\"tuple\",\"internalType\":\"structIBLSSignatureChecker.NonSignerStakesAndSignature\",\"components\":[{\"name\":\"nonSignerQuorumBitmapIndices\",\"type\":\"uint32[]\",\"internalType\":\"uint32[]\"},{\"name\":\"nonSignerPubkeys\",\"type\":\"tuple[]\",\"internalType\":\"structBN254.G1Point[]\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"quorumApks\",\"type\":\"tuple[]\",\"internalType\":\"structBN254.G1Point[]\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"apkG2\",\"type\":\"tuple\",\"internalType\":\"structBN254.G2Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"},{\"name\":\"Y\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"}]},{\"name\":\"sigma\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"quorumApkIndices\",\"type\":\"uint32[]\",\"internalType\":\"uint32[]\"},{\"name\":\"totalStakeIndices\",\"type\":\"uint32[]\",\"internalType\":\"uint32[]\"},{\"name\":\"nonSignerStakeIndices\",\"type\":\"uint32[][]\",\"internalType\":\"uint32[][]\"}]}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structIBLSSignatureChecker.QuorumStakeTotals\",\"components\":[{\"name\":\"signedStakeForQuorum\",\"type\":\"uint96[]\",\"internalType\":\"uint96[]\"},{\"name\":\"totalStakeForQuorum\",\"type\":\"uint96[]\",\"internalType\":\"uint96[]\"}]},{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"confirmAlert\",\"inputs\":[{\"name\":\"alertHeader\",\"type\":\"tuple\",\"internalType\":\"structIMachServiceManager.AlertHeader\",\"components\":[{\"name\":\"messageHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"quorumNumbers\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"quorumThresholdPercentages\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"referenceBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"expectOutputRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"journal\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"seal\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"postStateDigest\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"l2OutputIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"nonSignerStakesAndSignature\",\"type\":\"tuple\",\"internalType\":\"structIBLSSignatureChecker.NonSignerStakesAndSignature\",\"components\":[{\"name\":\"nonSignerQuorumBitmapIndices\",\"type\":\"uint32[]\",\"internalType\":\"uint32[]\"},{\"name\":\"nonSignerPubkeys\",\"type\":\"tuple[]\",\"internalType\":\"structBN254.G1Point[]\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"quorumApks\",\"type\":\"tuple[]\",\"internalType\":\"structBN254.G1Point[]\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"apkG2\",\"type\":\"tuple\",\"internalType\":\"structBN254.G2Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"},{\"name\":\"Y\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"}]},{\"name\":\"sigma\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"quorumApkIndices\",\"type\":\"uint32[]\",\"internalType\":\"uint32[]\"},{\"name\":\"totalStakeIndices\",\"type\":\"uint32[]\",\"internalType\":\"uint32[]\"},{\"name\":\"nonSignerStakeIndices\",\"type\":\"uint32[][]\",\"internalType\":\"uint32[][]\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"contains\",\"inputs\":[{\"name\":\"messageHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"delegation\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIDelegationManager\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"deregisterOperatorFromAVS\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"disableAllowlist\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"enableAllowlist\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"getOperatorRestakedStrategies\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getRestakeableStrategies\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"_pauserRegistry\",\"type\":\"address\",\"internalType\":\"contractIPauserRegistry\"},{\"name\":\"_initialPausedStatus\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_initialOwner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_alertConfirmer\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pause\",\"inputs\":[{\"name\":\"newPausedStatus\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"pauseAll\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"paused\",\"inputs\":[{\"name\":\"index\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"paused\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pauserRegistry\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIPauserRegistry\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"queryMessageHashes\",\"inputs\":[{\"name\":\"start\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"querySize\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\",\"internalType\":\"bytes32[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"quorumThresholdPercentage\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"registerOperatorToAVS\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operatorSignature\",\"type\":\"tuple\",\"internalType\":\"structISignatureUtils.SignatureWithSaltAndExpiry\",\"components\":[{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"salt\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"expiry\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"registryCoordinator\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIRegistryCoordinator\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"removeAlert\",\"inputs\":[{\"name\":\"messageHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"removeFromAllowlist\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setPauserRegistry\",\"inputs\":[{\"name\":\"newPauserRegistry\",\"type\":\"address\",\"internalType\":\"contractIPauserRegistry\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setStaleStakesForbidden\",\"inputs\":[{\"name\":\"value\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"stakeRegistry\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIStakeRegistry\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"staleStakesForbidden\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"totalAlerts\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"trySignatureAndApkVerification\",\"inputs\":[{\"name\":\"msgHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"apk\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"apkG2\",\"type\":\"tuple\",\"internalType\":\"structBN254.G2Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"},{\"name\":\"Y\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"}]},{\"name\":\"sigma\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"outputs\":[{\"name\":\"pairingSuccessful\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"siganatureIsValid\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"unpause\",\"inputs\":[{\"name\":\"newPausedStatus\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"updateAVSMetadataURI\",\"inputs\":[{\"name\":\"_metadataURI\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"updateQuorumThresholdPercentage\",\"inputs\":[{\"name\":\"thresholdPercentage\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"AlertConfirmed\",\"inputs\":[{\"name\":\"alertHeaderHash\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"messageHash\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"AlertConfirmerChanged\",\"inputs\":[{\"name\":\"previousAddress\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"newAddress\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"AlertRemoved\",\"inputs\":[{\"name\":\"messageHash\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"sender\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"AllowlistDisabled\",\"inputs\":[],\"anonymous\":false},{\"type\":\"event\",\"name\":\"AllowlistEnabled\",\"inputs\":[],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OperatorAdded\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OperatorAllowed\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OperatorDisallowed\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OperatorRemoved\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Paused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newPausedStatus\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PauserRegistrySet\",\"inputs\":[{\"name\":\"pauserRegistry\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIPauserRegistry\"},{\"name\":\"newPauserRegistry\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIPauserRegistry\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"QuorumThresholdPercentageChanged\",\"inputs\":[{\"name\":\"thresholdPercentages\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"StaleStakesForbiddenUpdate\",\"inputs\":[{\"name\":\"value\",\"type\":\"bool\",\"indexed\":false,\"internalType\":\"bool\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Unpaused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newPausedStatus\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"AlreadyInAllowlist\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InsufficientThreshold\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InsufficientThresholdPercentages\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidConfirmer\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidReferenceBlockNum\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidSender\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidStartIndex\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotInAllowlist\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ZeroAddress\",\"inputs\":[]}]",
	Bin: "",
}

// ContractMachServiceManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractMachServiceManagerMetaData.ABI instead.
var ContractMachServiceManagerABI = ContractMachServiceManagerMetaData.ABI

// ContractMachServiceManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractMachServiceManagerMetaData.Bin instead.
var ContractMachServiceManagerBin = ContractMachServiceManagerMetaData.Bin

// DeployContractMachServiceManager deploys a new Ethereum contract, binding an instance of ContractMachServiceManager to it.
func DeployContractMachServiceManager(auth *bind.TransactOpts, backend bind.ContractBackend, __avsDirectory common.Address, __registryCoordinator common.Address, __stakeRegistry common.Address) (common.Address, *types.Transaction, *ContractMachServiceManager, error) {
	parsed, err := ContractMachServiceManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractMachServiceManagerBin), backend, __avsDirectory, __registryCoordinator, __stakeRegistry)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ContractMachServiceManager{ContractMachServiceManagerCaller: ContractMachServiceManagerCaller{contract: contract}, ContractMachServiceManagerTransactor: ContractMachServiceManagerTransactor{contract: contract}, ContractMachServiceManagerFilterer: ContractMachServiceManagerFilterer{contract: contract}}, nil
}

// ContractMachServiceManager is an auto generated Go binding around an Ethereum contract.
type ContractMachServiceManager struct {
	ContractMachServiceManagerCaller     // Read-only binding to the contract
	ContractMachServiceManagerTransactor // Write-only binding to the contract
	ContractMachServiceManagerFilterer   // Log filterer for contract events
}

// ContractMachServiceManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractMachServiceManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractMachServiceManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractMachServiceManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractMachServiceManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractMachServiceManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractMachServiceManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractMachServiceManagerSession struct {
	Contract     *ContractMachServiceManager // Generic contract binding to set the session for
	CallOpts     bind.CallOpts               // Call options to use throughout this session
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// ContractMachServiceManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractMachServiceManagerCallerSession struct {
	Contract *ContractMachServiceManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                     // Call options to use throughout this session
}

// ContractMachServiceManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractMachServiceManagerTransactorSession struct {
	Contract     *ContractMachServiceManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                     // Transaction auth options to use throughout this session
}

// ContractMachServiceManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractMachServiceManagerRaw struct {
	Contract *ContractMachServiceManager // Generic contract binding to access the raw methods on
}

// ContractMachServiceManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractMachServiceManagerCallerRaw struct {
	Contract *ContractMachServiceManagerCaller // Generic read-only contract binding to access the raw methods on
}

// ContractMachServiceManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractMachServiceManagerTransactorRaw struct {
	Contract *ContractMachServiceManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContractMachServiceManager creates a new instance of ContractMachServiceManager, bound to a specific deployed contract.
func NewContractMachServiceManager(address common.Address, backend bind.ContractBackend) (*ContractMachServiceManager, error) {
	contract, err := bindContractMachServiceManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ContractMachServiceManager{ContractMachServiceManagerCaller: ContractMachServiceManagerCaller{contract: contract}, ContractMachServiceManagerTransactor: ContractMachServiceManagerTransactor{contract: contract}, ContractMachServiceManagerFilterer: ContractMachServiceManagerFilterer{contract: contract}}, nil
}

// NewContractMachServiceManagerCaller creates a new read-only instance of ContractMachServiceManager, bound to a specific deployed contract.
func NewContractMachServiceManagerCaller(address common.Address, caller bind.ContractCaller) (*ContractMachServiceManagerCaller, error) {
	contract, err := bindContractMachServiceManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractMachServiceManagerCaller{contract: contract}, nil
}

// NewContractMachServiceManagerTransactor creates a new write-only instance of ContractMachServiceManager, bound to a specific deployed contract.
func NewContractMachServiceManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractMachServiceManagerTransactor, error) {
	contract, err := bindContractMachServiceManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractMachServiceManagerTransactor{contract: contract}, nil
}

// NewContractMachServiceManagerFilterer creates a new log filterer instance of ContractMachServiceManager, bound to a specific deployed contract.
func NewContractMachServiceManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractMachServiceManagerFilterer, error) {
	contract, err := bindContractMachServiceManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractMachServiceManagerFilterer{contract: contract}, nil
}

// bindContractMachServiceManager binds a generic wrapper to an already deployed contract.
func bindContractMachServiceManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractMachServiceManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractMachServiceManager *ContractMachServiceManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractMachServiceManager.Contract.ContractMachServiceManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractMachServiceManager *ContractMachServiceManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractMachServiceManager.Contract.ContractMachServiceManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractMachServiceManager *ContractMachServiceManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractMachServiceManager.Contract.ContractMachServiceManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractMachServiceManager *ContractMachServiceManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractMachServiceManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractMachServiceManager *ContractMachServiceManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractMachServiceManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractMachServiceManager *ContractMachServiceManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractMachServiceManager.Contract.contract.Transact(opts, method, params...)
}

// THRESHOLDDENOMINATOR is a free data retrieval call binding the contract method 0xef024458.
//
// Solidity: function THRESHOLD_DENOMINATOR() view returns(uint256)
func (_ContractMachServiceManager *ContractMachServiceManagerCaller) THRESHOLDDENOMINATOR(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ContractMachServiceManager.contract.Call(opts, &out, "THRESHOLD_DENOMINATOR")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// THRESHOLDDENOMINATOR is a free data retrieval call binding the contract method 0xef024458.
//
// Solidity: function THRESHOLD_DENOMINATOR() view returns(uint256)
func (_ContractMachServiceManager *ContractMachServiceManagerSession) THRESHOLDDENOMINATOR() (*big.Int, error) {
	return _ContractMachServiceManager.Contract.THRESHOLDDENOMINATOR(&_ContractMachServiceManager.CallOpts)
}

// THRESHOLDDENOMINATOR is a free data retrieval call binding the contract method 0xef024458.
//
// Solidity: function THRESHOLD_DENOMINATOR() view returns(uint256)
func (_ContractMachServiceManager *ContractMachServiceManagerCallerSession) THRESHOLDDENOMINATOR() (*big.Int, error) {
	return _ContractMachServiceManager.Contract.THRESHOLDDENOMINATOR(&_ContractMachServiceManager.CallOpts)
}

// AlertConfirmer is a free data retrieval call binding the contract method 0x39bc68e7.
//
// Solidity: function alertConfirmer() view returns(address)
func (_ContractMachServiceManager *ContractMachServiceManagerCaller) AlertConfirmer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractMachServiceManager.contract.Call(opts, &out, "alertConfirmer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AlertConfirmer is a free data retrieval call binding the contract method 0x39bc68e7.
//
// Solidity: function alertConfirmer() view returns(address)
func (_ContractMachServiceManager *ContractMachServiceManagerSession) AlertConfirmer() (common.Address, error) {
	return _ContractMachServiceManager.Contract.AlertConfirmer(&_ContractMachServiceManager.CallOpts)
}

// AlertConfirmer is a free data retrieval call binding the contract method 0x39bc68e7.
//
// Solidity: function alertConfirmer() view returns(address)
func (_ContractMachServiceManager *ContractMachServiceManagerCallerSession) AlertConfirmer() (common.Address, error) {
	return _ContractMachServiceManager.Contract.AlertConfirmer(&_ContractMachServiceManager.CallOpts)
}

// AllowlistEnabled is a free data retrieval call binding the contract method 0x94c8e4ff.
//
// Solidity: function allowlistEnabled() view returns(bool)
func (_ContractMachServiceManager *ContractMachServiceManagerCaller) AllowlistEnabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ContractMachServiceManager.contract.Call(opts, &out, "allowlistEnabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AllowlistEnabled is a free data retrieval call binding the contract method 0x94c8e4ff.
//
// Solidity: function allowlistEnabled() view returns(bool)
func (_ContractMachServiceManager *ContractMachServiceManagerSession) AllowlistEnabled() (bool, error) {
	return _ContractMachServiceManager.Contract.AllowlistEnabled(&_ContractMachServiceManager.CallOpts)
}

// AllowlistEnabled is a free data retrieval call binding the contract method 0x94c8e4ff.
//
// Solidity: function allowlistEnabled() view returns(bool)
func (_ContractMachServiceManager *ContractMachServiceManagerCallerSession) AllowlistEnabled() (bool, error) {
	return _ContractMachServiceManager.Contract.AllowlistEnabled(&_ContractMachServiceManager.CallOpts)
}

// AvsDirectory is a free data retrieval call binding the contract method 0x6b3aa72e.
//
// Solidity: function avsDirectory() view returns(address)
func (_ContractMachServiceManager *ContractMachServiceManagerCaller) AvsDirectory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractMachServiceManager.contract.Call(opts, &out, "avsDirectory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AvsDirectory is a free data retrieval call binding the contract method 0x6b3aa72e.
//
// Solidity: function avsDirectory() view returns(address)
func (_ContractMachServiceManager *ContractMachServiceManagerSession) AvsDirectory() (common.Address, error) {
	return _ContractMachServiceManager.Contract.AvsDirectory(&_ContractMachServiceManager.CallOpts)
}

// AvsDirectory is a free data retrieval call binding the contract method 0x6b3aa72e.
//
// Solidity: function avsDirectory() view returns(address)
func (_ContractMachServiceManager *ContractMachServiceManagerCallerSession) AvsDirectory() (common.Address, error) {
	return _ContractMachServiceManager.Contract.AvsDirectory(&_ContractMachServiceManager.CallOpts)
}

// BlsApkRegistry is a free data retrieval call binding the contract method 0x5df45946.
//
// Solidity: function blsApkRegistry() view returns(address)
func (_ContractMachServiceManager *ContractMachServiceManagerCaller) BlsApkRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractMachServiceManager.contract.Call(opts, &out, "blsApkRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BlsApkRegistry is a free data retrieval call binding the contract method 0x5df45946.
//
// Solidity: function blsApkRegistry() view returns(address)
func (_ContractMachServiceManager *ContractMachServiceManagerSession) BlsApkRegistry() (common.Address, error) {
	return _ContractMachServiceManager.Contract.BlsApkRegistry(&_ContractMachServiceManager.CallOpts)
}

// BlsApkRegistry is a free data retrieval call binding the contract method 0x5df45946.
//
// Solidity: function blsApkRegistry() view returns(address)
func (_ContractMachServiceManager *ContractMachServiceManagerCallerSession) BlsApkRegistry() (common.Address, error) {
	return _ContractMachServiceManager.Contract.BlsApkRegistry(&_ContractMachServiceManager.CallOpts)
}

// CheckSignatures is a free data retrieval call binding the contract method 0x6efb4636.
//
// Solidity: function checkSignatures(bytes32 msgHash, bytes quorumNumbers, uint32 referenceBlockNumber, (uint32[],(uint256,uint256)[],(uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint32[],uint32[],uint32[][]) params) view returns((uint96[],uint96[]), bytes32)
func (_ContractMachServiceManager *ContractMachServiceManagerCaller) CheckSignatures(opts *bind.CallOpts, msgHash [32]byte, quorumNumbers []byte, referenceBlockNumber uint32, params IBLSSignatureCheckerNonSignerStakesAndSignature) (IBLSSignatureCheckerQuorumStakeTotals, [32]byte, error) {
	var out []interface{}
	err := _ContractMachServiceManager.contract.Call(opts, &out, "checkSignatures", msgHash, quorumNumbers, referenceBlockNumber, params)

	if err != nil {
		return *new(IBLSSignatureCheckerQuorumStakeTotals), *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new(IBLSSignatureCheckerQuorumStakeTotals)).(*IBLSSignatureCheckerQuorumStakeTotals)
	out1 := *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)

	return out0, out1, err

}

// CheckSignatures is a free data retrieval call binding the contract method 0x6efb4636.
//
// Solidity: function checkSignatures(bytes32 msgHash, bytes quorumNumbers, uint32 referenceBlockNumber, (uint32[],(uint256,uint256)[],(uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint32[],uint32[],uint32[][]) params) view returns((uint96[],uint96[]), bytes32)
func (_ContractMachServiceManager *ContractMachServiceManagerSession) CheckSignatures(msgHash [32]byte, quorumNumbers []byte, referenceBlockNumber uint32, params IBLSSignatureCheckerNonSignerStakesAndSignature) (IBLSSignatureCheckerQuorumStakeTotals, [32]byte, error) {
	return _ContractMachServiceManager.Contract.CheckSignatures(&_ContractMachServiceManager.CallOpts, msgHash, quorumNumbers, referenceBlockNumber, params)
}

// CheckSignatures is a free data retrieval call binding the contract method 0x6efb4636.
//
// Solidity: function checkSignatures(bytes32 msgHash, bytes quorumNumbers, uint32 referenceBlockNumber, (uint32[],(uint256,uint256)[],(uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint32[],uint32[],uint32[][]) params) view returns((uint96[],uint96[]), bytes32)
func (_ContractMachServiceManager *ContractMachServiceManagerCallerSession) CheckSignatures(msgHash [32]byte, quorumNumbers []byte, referenceBlockNumber uint32, params IBLSSignatureCheckerNonSignerStakesAndSignature) (IBLSSignatureCheckerQuorumStakeTotals, [32]byte, error) {
	return _ContractMachServiceManager.Contract.CheckSignatures(&_ContractMachServiceManager.CallOpts, msgHash, quorumNumbers, referenceBlockNumber, params)
}

// Contains is a free data retrieval call binding the contract method 0x1d1a696d.
//
// Solidity: function contains(bytes32 messageHash) view returns(bool)
func (_ContractMachServiceManager *ContractMachServiceManagerCaller) Contains(opts *bind.CallOpts, messageHash [32]byte) (bool, error) {
	var out []interface{}
	err := _ContractMachServiceManager.contract.Call(opts, &out, "contains", messageHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Contains is a free data retrieval call binding the contract method 0x1d1a696d.
//
// Solidity: function contains(bytes32 messageHash) view returns(bool)
func (_ContractMachServiceManager *ContractMachServiceManagerSession) Contains(messageHash [32]byte) (bool, error) {
	return _ContractMachServiceManager.Contract.Contains(&_ContractMachServiceManager.CallOpts, messageHash)
}

// Contains is a free data retrieval call binding the contract method 0x1d1a696d.
//
// Solidity: function contains(bytes32 messageHash) view returns(bool)
func (_ContractMachServiceManager *ContractMachServiceManagerCallerSession) Contains(messageHash [32]byte) (bool, error) {
	return _ContractMachServiceManager.Contract.Contains(&_ContractMachServiceManager.CallOpts, messageHash)
}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_ContractMachServiceManager *ContractMachServiceManagerCaller) Delegation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractMachServiceManager.contract.Call(opts, &out, "delegation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_ContractMachServiceManager *ContractMachServiceManagerSession) Delegation() (common.Address, error) {
	return _ContractMachServiceManager.Contract.Delegation(&_ContractMachServiceManager.CallOpts)
}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_ContractMachServiceManager *ContractMachServiceManagerCallerSession) Delegation() (common.Address, error) {
	return _ContractMachServiceManager.Contract.Delegation(&_ContractMachServiceManager.CallOpts)
}

// GetOperatorRestakedStrategies is a free data retrieval call binding the contract method 0x33cfb7b7.
//
// Solidity: function getOperatorRestakedStrategies(address operator) view returns(address[])
func (_ContractMachServiceManager *ContractMachServiceManagerCaller) GetOperatorRestakedStrategies(opts *bind.CallOpts, operator common.Address) ([]common.Address, error) {
	var out []interface{}
	err := _ContractMachServiceManager.contract.Call(opts, &out, "getOperatorRestakedStrategies", operator)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetOperatorRestakedStrategies is a free data retrieval call binding the contract method 0x33cfb7b7.
//
// Solidity: function getOperatorRestakedStrategies(address operator) view returns(address[])
func (_ContractMachServiceManager *ContractMachServiceManagerSession) GetOperatorRestakedStrategies(operator common.Address) ([]common.Address, error) {
	return _ContractMachServiceManager.Contract.GetOperatorRestakedStrategies(&_ContractMachServiceManager.CallOpts, operator)
}

// GetOperatorRestakedStrategies is a free data retrieval call binding the contract method 0x33cfb7b7.
//
// Solidity: function getOperatorRestakedStrategies(address operator) view returns(address[])
func (_ContractMachServiceManager *ContractMachServiceManagerCallerSession) GetOperatorRestakedStrategies(operator common.Address) ([]common.Address, error) {
	return _ContractMachServiceManager.Contract.GetOperatorRestakedStrategies(&_ContractMachServiceManager.CallOpts, operator)
}

// GetRestakeableStrategies is a free data retrieval call binding the contract method 0xe481af9d.
//
// Solidity: function getRestakeableStrategies() view returns(address[])
func (_ContractMachServiceManager *ContractMachServiceManagerCaller) GetRestakeableStrategies(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _ContractMachServiceManager.contract.Call(opts, &out, "getRestakeableStrategies")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetRestakeableStrategies is a free data retrieval call binding the contract method 0xe481af9d.
//
// Solidity: function getRestakeableStrategies() view returns(address[])
func (_ContractMachServiceManager *ContractMachServiceManagerSession) GetRestakeableStrategies() ([]common.Address, error) {
	return _ContractMachServiceManager.Contract.GetRestakeableStrategies(&_ContractMachServiceManager.CallOpts)
}

// GetRestakeableStrategies is a free data retrieval call binding the contract method 0xe481af9d.
//
// Solidity: function getRestakeableStrategies() view returns(address[])
func (_ContractMachServiceManager *ContractMachServiceManagerCallerSession) GetRestakeableStrategies() ([]common.Address, error) {
	return _ContractMachServiceManager.Contract.GetRestakeableStrategies(&_ContractMachServiceManager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractMachServiceManager *ContractMachServiceManagerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractMachServiceManager.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractMachServiceManager *ContractMachServiceManagerSession) Owner() (common.Address, error) {
	return _ContractMachServiceManager.Contract.Owner(&_ContractMachServiceManager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractMachServiceManager *ContractMachServiceManagerCallerSession) Owner() (common.Address, error) {
	return _ContractMachServiceManager.Contract.Owner(&_ContractMachServiceManager.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_ContractMachServiceManager *ContractMachServiceManagerCaller) Paused(opts *bind.CallOpts, index uint8) (bool, error) {
	var out []interface{}
	err := _ContractMachServiceManager.contract.Call(opts, &out, "paused", index)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_ContractMachServiceManager *ContractMachServiceManagerSession) Paused(index uint8) (bool, error) {
	return _ContractMachServiceManager.Contract.Paused(&_ContractMachServiceManager.CallOpts, index)
}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_ContractMachServiceManager *ContractMachServiceManagerCallerSession) Paused(index uint8) (bool, error) {
	return _ContractMachServiceManager.Contract.Paused(&_ContractMachServiceManager.CallOpts, index)
}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_ContractMachServiceManager *ContractMachServiceManagerCaller) Paused0(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ContractMachServiceManager.contract.Call(opts, &out, "paused0")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_ContractMachServiceManager *ContractMachServiceManagerSession) Paused0() (*big.Int, error) {
	return _ContractMachServiceManager.Contract.Paused0(&_ContractMachServiceManager.CallOpts)
}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_ContractMachServiceManager *ContractMachServiceManagerCallerSession) Paused0() (*big.Int, error) {
	return _ContractMachServiceManager.Contract.Paused0(&_ContractMachServiceManager.CallOpts)
}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_ContractMachServiceManager *ContractMachServiceManagerCaller) PauserRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractMachServiceManager.contract.Call(opts, &out, "pauserRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_ContractMachServiceManager *ContractMachServiceManagerSession) PauserRegistry() (common.Address, error) {
	return _ContractMachServiceManager.Contract.PauserRegistry(&_ContractMachServiceManager.CallOpts)
}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_ContractMachServiceManager *ContractMachServiceManagerCallerSession) PauserRegistry() (common.Address, error) {
	return _ContractMachServiceManager.Contract.PauserRegistry(&_ContractMachServiceManager.CallOpts)
}

// QueryMessageHashes is a free data retrieval call binding the contract method 0x54f4a917.
//
// Solidity: function queryMessageHashes(uint256 start, uint256 querySize) view returns(bytes32[])
func (_ContractMachServiceManager *ContractMachServiceManagerCaller) QueryMessageHashes(opts *bind.CallOpts, start *big.Int, querySize *big.Int) ([][32]byte, error) {
	var out []interface{}
	err := _ContractMachServiceManager.contract.Call(opts, &out, "queryMessageHashes", start, querySize)

	if err != nil {
		return *new([][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)

	return out0, err

}

// QueryMessageHashes is a free data retrieval call binding the contract method 0x54f4a917.
//
// Solidity: function queryMessageHashes(uint256 start, uint256 querySize) view returns(bytes32[])
func (_ContractMachServiceManager *ContractMachServiceManagerSession) QueryMessageHashes(start *big.Int, querySize *big.Int) ([][32]byte, error) {
	return _ContractMachServiceManager.Contract.QueryMessageHashes(&_ContractMachServiceManager.CallOpts, start, querySize)
}

// QueryMessageHashes is a free data retrieval call binding the contract method 0x54f4a917.
//
// Solidity: function queryMessageHashes(uint256 start, uint256 querySize) view returns(bytes32[])
func (_ContractMachServiceManager *ContractMachServiceManagerCallerSession) QueryMessageHashes(start *big.Int, querySize *big.Int) ([][32]byte, error) {
	return _ContractMachServiceManager.Contract.QueryMessageHashes(&_ContractMachServiceManager.CallOpts, start, querySize)
}

// QuorumThresholdPercentage is a free data retrieval call binding the contract method 0x4deabc21.
//
// Solidity: function quorumThresholdPercentage() view returns(uint8)
func (_ContractMachServiceManager *ContractMachServiceManagerCaller) QuorumThresholdPercentage(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _ContractMachServiceManager.contract.Call(opts, &out, "quorumThresholdPercentage")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// QuorumThresholdPercentage is a free data retrieval call binding the contract method 0x4deabc21.
//
// Solidity: function quorumThresholdPercentage() view returns(uint8)
func (_ContractMachServiceManager *ContractMachServiceManagerSession) QuorumThresholdPercentage() (uint8, error) {
	return _ContractMachServiceManager.Contract.QuorumThresholdPercentage(&_ContractMachServiceManager.CallOpts)
}

// QuorumThresholdPercentage is a free data retrieval call binding the contract method 0x4deabc21.
//
// Solidity: function quorumThresholdPercentage() view returns(uint8)
func (_ContractMachServiceManager *ContractMachServiceManagerCallerSession) QuorumThresholdPercentage() (uint8, error) {
	return _ContractMachServiceManager.Contract.QuorumThresholdPercentage(&_ContractMachServiceManager.CallOpts)
}

// RegistryCoordinator is a free data retrieval call binding the contract method 0x6d14a987.
//
// Solidity: function registryCoordinator() view returns(address)
func (_ContractMachServiceManager *ContractMachServiceManagerCaller) RegistryCoordinator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractMachServiceManager.contract.Call(opts, &out, "registryCoordinator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RegistryCoordinator is a free data retrieval call binding the contract method 0x6d14a987.
//
// Solidity: function registryCoordinator() view returns(address)
func (_ContractMachServiceManager *ContractMachServiceManagerSession) RegistryCoordinator() (common.Address, error) {
	return _ContractMachServiceManager.Contract.RegistryCoordinator(&_ContractMachServiceManager.CallOpts)
}

// RegistryCoordinator is a free data retrieval call binding the contract method 0x6d14a987.
//
// Solidity: function registryCoordinator() view returns(address)
func (_ContractMachServiceManager *ContractMachServiceManagerCallerSession) RegistryCoordinator() (common.Address, error) {
	return _ContractMachServiceManager.Contract.RegistryCoordinator(&_ContractMachServiceManager.CallOpts)
}

// StakeRegistry is a free data retrieval call binding the contract method 0x68304835.
//
// Solidity: function stakeRegistry() view returns(address)
func (_ContractMachServiceManager *ContractMachServiceManagerCaller) StakeRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractMachServiceManager.contract.Call(opts, &out, "stakeRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeRegistry is a free data retrieval call binding the contract method 0x68304835.
//
// Solidity: function stakeRegistry() view returns(address)
func (_ContractMachServiceManager *ContractMachServiceManagerSession) StakeRegistry() (common.Address, error) {
	return _ContractMachServiceManager.Contract.StakeRegistry(&_ContractMachServiceManager.CallOpts)
}

// StakeRegistry is a free data retrieval call binding the contract method 0x68304835.
//
// Solidity: function stakeRegistry() view returns(address)
func (_ContractMachServiceManager *ContractMachServiceManagerCallerSession) StakeRegistry() (common.Address, error) {
	return _ContractMachServiceManager.Contract.StakeRegistry(&_ContractMachServiceManager.CallOpts)
}

// StaleStakesForbidden is a free data retrieval call binding the contract method 0xb98d0908.
//
// Solidity: function staleStakesForbidden() view returns(bool)
func (_ContractMachServiceManager *ContractMachServiceManagerCaller) StaleStakesForbidden(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ContractMachServiceManager.contract.Call(opts, &out, "staleStakesForbidden")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// StaleStakesForbidden is a free data retrieval call binding the contract method 0xb98d0908.
//
// Solidity: function staleStakesForbidden() view returns(bool)
func (_ContractMachServiceManager *ContractMachServiceManagerSession) StaleStakesForbidden() (bool, error) {
	return _ContractMachServiceManager.Contract.StaleStakesForbidden(&_ContractMachServiceManager.CallOpts)
}

// StaleStakesForbidden is a free data retrieval call binding the contract method 0xb98d0908.
//
// Solidity: function staleStakesForbidden() view returns(bool)
func (_ContractMachServiceManager *ContractMachServiceManagerCallerSession) StaleStakesForbidden() (bool, error) {
	return _ContractMachServiceManager.Contract.StaleStakesForbidden(&_ContractMachServiceManager.CallOpts)
}

// TotalAlerts is a free data retrieval call binding the contract method 0x4f2b85db.
//
// Solidity: function totalAlerts() view returns(uint256)
func (_ContractMachServiceManager *ContractMachServiceManagerCaller) TotalAlerts(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ContractMachServiceManager.contract.Call(opts, &out, "totalAlerts")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalAlerts is a free data retrieval call binding the contract method 0x4f2b85db.
//
// Solidity: function totalAlerts() view returns(uint256)
func (_ContractMachServiceManager *ContractMachServiceManagerSession) TotalAlerts() (*big.Int, error) {
	return _ContractMachServiceManager.Contract.TotalAlerts(&_ContractMachServiceManager.CallOpts)
}

// TotalAlerts is a free data retrieval call binding the contract method 0x4f2b85db.
//
// Solidity: function totalAlerts() view returns(uint256)
func (_ContractMachServiceManager *ContractMachServiceManagerCallerSession) TotalAlerts() (*big.Int, error) {
	return _ContractMachServiceManager.Contract.TotalAlerts(&_ContractMachServiceManager.CallOpts)
}

// TrySignatureAndApkVerification is a free data retrieval call binding the contract method 0x171f1d5b.
//
// Solidity: function trySignatureAndApkVerification(bytes32 msgHash, (uint256,uint256) apk, (uint256[2],uint256[2]) apkG2, (uint256,uint256) sigma) view returns(bool pairingSuccessful, bool siganatureIsValid)
func (_ContractMachServiceManager *ContractMachServiceManagerCaller) TrySignatureAndApkVerification(opts *bind.CallOpts, msgHash [32]byte, apk BN254G1Point, apkG2 BN254G2Point, sigma BN254G1Point) (struct {
	PairingSuccessful bool
	SiganatureIsValid bool
}, error) {
	var out []interface{}
	err := _ContractMachServiceManager.contract.Call(opts, &out, "trySignatureAndApkVerification", msgHash, apk, apkG2, sigma)

	outstruct := new(struct {
		PairingSuccessful bool
		SiganatureIsValid bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.PairingSuccessful = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.SiganatureIsValid = *abi.ConvertType(out[1], new(bool)).(*bool)

	return *outstruct, err

}

// TrySignatureAndApkVerification is a free data retrieval call binding the contract method 0x171f1d5b.
//
// Solidity: function trySignatureAndApkVerification(bytes32 msgHash, (uint256,uint256) apk, (uint256[2],uint256[2]) apkG2, (uint256,uint256) sigma) view returns(bool pairingSuccessful, bool siganatureIsValid)
func (_ContractMachServiceManager *ContractMachServiceManagerSession) TrySignatureAndApkVerification(msgHash [32]byte, apk BN254G1Point, apkG2 BN254G2Point, sigma BN254G1Point) (struct {
	PairingSuccessful bool
	SiganatureIsValid bool
}, error) {
	return _ContractMachServiceManager.Contract.TrySignatureAndApkVerification(&_ContractMachServiceManager.CallOpts, msgHash, apk, apkG2, sigma)
}

// TrySignatureAndApkVerification is a free data retrieval call binding the contract method 0x171f1d5b.
//
// Solidity: function trySignatureAndApkVerification(bytes32 msgHash, (uint256,uint256) apk, (uint256[2],uint256[2]) apkG2, (uint256,uint256) sigma) view returns(bool pairingSuccessful, bool siganatureIsValid)
func (_ContractMachServiceManager *ContractMachServiceManagerCallerSession) TrySignatureAndApkVerification(msgHash [32]byte, apk BN254G1Point, apkG2 BN254G2Point, sigma BN254G1Point) (struct {
	PairingSuccessful bool
	SiganatureIsValid bool
}, error) {
	return _ContractMachServiceManager.Contract.TrySignatureAndApkVerification(&_ContractMachServiceManager.CallOpts, msgHash, apk, apkG2, sigma)
}

// AddToAllowlist is a paid mutator transaction binding the contract method 0xf8e86ece.
//
// Solidity: function addToAllowlist(address operator) returns()
func (_ContractMachServiceManager *ContractMachServiceManagerTransactor) AddToAllowlist(opts *bind.TransactOpts, operator common.Address) (*types.Transaction, error) {
	return _ContractMachServiceManager.contract.Transact(opts, "addToAllowlist", operator)
}

// AddToAllowlist is a paid mutator transaction binding the contract method 0xf8e86ece.
//
// Solidity: function addToAllowlist(address operator) returns()
func (_ContractMachServiceManager *ContractMachServiceManagerSession) AddToAllowlist(operator common.Address) (*types.Transaction, error) {
	return _ContractMachServiceManager.Contract.AddToAllowlist(&_ContractMachServiceManager.TransactOpts, operator)
}

// AddToAllowlist is a paid mutator transaction binding the contract method 0xf8e86ece.
//
// Solidity: function addToAllowlist(address operator) returns()
func (_ContractMachServiceManager *ContractMachServiceManagerTransactorSession) AddToAllowlist(operator common.Address) (*types.Transaction, error) {
	return _ContractMachServiceManager.Contract.AddToAllowlist(&_ContractMachServiceManager.TransactOpts, operator)
}

// ConfirmAlert is a paid mutator transaction binding the contract method 0x7b863add.
//
// Solidity: function confirmAlert((bytes32,bytes,bytes,uint32,bytes32,bytes,bytes,bytes32,uint256) alertHeader, (uint32[],(uint256,uint256)[],(uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint32[],uint32[],uint32[][]) nonSignerStakesAndSignature) returns()
func (_ContractMachServiceManager *ContractMachServiceManagerTransactor) ConfirmAlert(opts *bind.TransactOpts, alertHeader IMachServiceManagerAlertHeader, nonSignerStakesAndSignature IBLSSignatureCheckerNonSignerStakesAndSignature) (*types.Transaction, error) {
	return _ContractMachServiceManager.contract.Transact(opts, "confirmAlert", alertHeader, nonSignerStakesAndSignature)
}

// ConfirmAlert is a paid mutator transaction binding the contract method 0x7b863add.
//
// Solidity: function confirmAlert((bytes32,bytes,bytes,uint32,bytes32,bytes,bytes,bytes32,uint256) alertHeader, (uint32[],(uint256,uint256)[],(uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint32[],uint32[],uint32[][]) nonSignerStakesAndSignature) returns()
func (_ContractMachServiceManager *ContractMachServiceManagerSession) ConfirmAlert(alertHeader IMachServiceManagerAlertHeader, nonSignerStakesAndSignature IBLSSignatureCheckerNonSignerStakesAndSignature) (*types.Transaction, error) {
	return _ContractMachServiceManager.Contract.ConfirmAlert(&_ContractMachServiceManager.TransactOpts, alertHeader, nonSignerStakesAndSignature)
}

// ConfirmAlert is a paid mutator transaction binding the contract method 0x7b863add.
//
// Solidity: function confirmAlert((bytes32,bytes,bytes,uint32,bytes32,bytes,bytes,bytes32,uint256) alertHeader, (uint32[],(uint256,uint256)[],(uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint32[],uint32[],uint32[][]) nonSignerStakesAndSignature) returns()
func (_ContractMachServiceManager *ContractMachServiceManagerTransactorSession) ConfirmAlert(alertHeader IMachServiceManagerAlertHeader, nonSignerStakesAndSignature IBLSSignatureCheckerNonSignerStakesAndSignature) (*types.Transaction, error) {
	return _ContractMachServiceManager.Contract.ConfirmAlert(&_ContractMachServiceManager.TransactOpts, alertHeader, nonSignerStakesAndSignature)
}

// DeregisterOperatorFromAVS is a paid mutator transaction binding the contract method 0xa364f4da.
//
// Solidity: function deregisterOperatorFromAVS(address operator) returns()
func (_ContractMachServiceManager *ContractMachServiceManagerTransactor) DeregisterOperatorFromAVS(opts *bind.TransactOpts, operator common.Address) (*types.Transaction, error) {
	return _ContractMachServiceManager.contract.Transact(opts, "deregisterOperatorFromAVS", operator)
}

// DeregisterOperatorFromAVS is a paid mutator transaction binding the contract method 0xa364f4da.
//
// Solidity: function deregisterOperatorFromAVS(address operator) returns()
func (_ContractMachServiceManager *ContractMachServiceManagerSession) DeregisterOperatorFromAVS(operator common.Address) (*types.Transaction, error) {
	return _ContractMachServiceManager.Contract.DeregisterOperatorFromAVS(&_ContractMachServiceManager.TransactOpts, operator)
}

// DeregisterOperatorFromAVS is a paid mutator transaction binding the contract method 0xa364f4da.
//
// Solidity: function deregisterOperatorFromAVS(address operator) returns()
func (_ContractMachServiceManager *ContractMachServiceManagerTransactorSession) DeregisterOperatorFromAVS(operator common.Address) (*types.Transaction, error) {
	return _ContractMachServiceManager.Contract.DeregisterOperatorFromAVS(&_ContractMachServiceManager.TransactOpts, operator)
}

// DisableAllowlist is a paid mutator transaction binding the contract method 0xcf8e629a.
//
// Solidity: function disableAllowlist() returns()
func (_ContractMachServiceManager *ContractMachServiceManagerTransactor) DisableAllowlist(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractMachServiceManager.contract.Transact(opts, "disableAllowlist")
}

// DisableAllowlist is a paid mutator transaction binding the contract method 0xcf8e629a.
//
// Solidity: function disableAllowlist() returns()
func (_ContractMachServiceManager *ContractMachServiceManagerSession) DisableAllowlist() (*types.Transaction, error) {
	return _ContractMachServiceManager.Contract.DisableAllowlist(&_ContractMachServiceManager.TransactOpts)
}

// DisableAllowlist is a paid mutator transaction binding the contract method 0xcf8e629a.
//
// Solidity: function disableAllowlist() returns()
func (_ContractMachServiceManager *ContractMachServiceManagerTransactorSession) DisableAllowlist() (*types.Transaction, error) {
	return _ContractMachServiceManager.Contract.DisableAllowlist(&_ContractMachServiceManager.TransactOpts)
}

// EnableAllowlist is a paid mutator transaction binding the contract method 0xc6a2aac8.
//
// Solidity: function enableAllowlist() returns()
func (_ContractMachServiceManager *ContractMachServiceManagerTransactor) EnableAllowlist(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractMachServiceManager.contract.Transact(opts, "enableAllowlist")
}

// EnableAllowlist is a paid mutator transaction binding the contract method 0xc6a2aac8.
//
// Solidity: function enableAllowlist() returns()
func (_ContractMachServiceManager *ContractMachServiceManagerSession) EnableAllowlist() (*types.Transaction, error) {
	return _ContractMachServiceManager.Contract.EnableAllowlist(&_ContractMachServiceManager.TransactOpts)
}

// EnableAllowlist is a paid mutator transaction binding the contract method 0xc6a2aac8.
//
// Solidity: function enableAllowlist() returns()
func (_ContractMachServiceManager *ContractMachServiceManagerTransactorSession) EnableAllowlist() (*types.Transaction, error) {
	return _ContractMachServiceManager.Contract.EnableAllowlist(&_ContractMachServiceManager.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x358394d8.
//
// Solidity: function initialize(address _pauserRegistry, uint256 _initialPausedStatus, address _initialOwner, address _alertConfirmer) returns()
func (_ContractMachServiceManager *ContractMachServiceManagerTransactor) Initialize(opts *bind.TransactOpts, _pauserRegistry common.Address, _initialPausedStatus *big.Int, _initialOwner common.Address, _alertConfirmer common.Address) (*types.Transaction, error) {
	return _ContractMachServiceManager.contract.Transact(opts, "initialize", _pauserRegistry, _initialPausedStatus, _initialOwner, _alertConfirmer)
}

// Initialize is a paid mutator transaction binding the contract method 0x358394d8.
//
// Solidity: function initialize(address _pauserRegistry, uint256 _initialPausedStatus, address _initialOwner, address _alertConfirmer) returns()
func (_ContractMachServiceManager *ContractMachServiceManagerSession) Initialize(_pauserRegistry common.Address, _initialPausedStatus *big.Int, _initialOwner common.Address, _alertConfirmer common.Address) (*types.Transaction, error) {
	return _ContractMachServiceManager.Contract.Initialize(&_ContractMachServiceManager.TransactOpts, _pauserRegistry, _initialPausedStatus, _initialOwner, _alertConfirmer)
}

// Initialize is a paid mutator transaction binding the contract method 0x358394d8.
//
// Solidity: function initialize(address _pauserRegistry, uint256 _initialPausedStatus, address _initialOwner, address _alertConfirmer) returns()
func (_ContractMachServiceManager *ContractMachServiceManagerTransactorSession) Initialize(_pauserRegistry common.Address, _initialPausedStatus *big.Int, _initialOwner common.Address, _alertConfirmer common.Address) (*types.Transaction, error) {
	return _ContractMachServiceManager.Contract.Initialize(&_ContractMachServiceManager.TransactOpts, _pauserRegistry, _initialPausedStatus, _initialOwner, _alertConfirmer)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_ContractMachServiceManager *ContractMachServiceManagerTransactor) Pause(opts *bind.TransactOpts, newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractMachServiceManager.contract.Transact(opts, "pause", newPausedStatus)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_ContractMachServiceManager *ContractMachServiceManagerSession) Pause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractMachServiceManager.Contract.Pause(&_ContractMachServiceManager.TransactOpts, newPausedStatus)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_ContractMachServiceManager *ContractMachServiceManagerTransactorSession) Pause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractMachServiceManager.Contract.Pause(&_ContractMachServiceManager.TransactOpts, newPausedStatus)
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_ContractMachServiceManager *ContractMachServiceManagerTransactor) PauseAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractMachServiceManager.contract.Transact(opts, "pauseAll")
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_ContractMachServiceManager *ContractMachServiceManagerSession) PauseAll() (*types.Transaction, error) {
	return _ContractMachServiceManager.Contract.PauseAll(&_ContractMachServiceManager.TransactOpts)
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_ContractMachServiceManager *ContractMachServiceManagerTransactorSession) PauseAll() (*types.Transaction, error) {
	return _ContractMachServiceManager.Contract.PauseAll(&_ContractMachServiceManager.TransactOpts)
}

// RegisterOperatorToAVS is a paid mutator transaction binding the contract method 0x9926ee7d.
//
// Solidity: function registerOperatorToAVS(address operator, (bytes,bytes32,uint256) operatorSignature) returns()
func (_ContractMachServiceManager *ContractMachServiceManagerTransactor) RegisterOperatorToAVS(opts *bind.TransactOpts, operator common.Address, operatorSignature ISignatureUtilsSignatureWithSaltAndExpiry) (*types.Transaction, error) {
	return _ContractMachServiceManager.contract.Transact(opts, "registerOperatorToAVS", operator, operatorSignature)
}

// RegisterOperatorToAVS is a paid mutator transaction binding the contract method 0x9926ee7d.
//
// Solidity: function registerOperatorToAVS(address operator, (bytes,bytes32,uint256) operatorSignature) returns()
func (_ContractMachServiceManager *ContractMachServiceManagerSession) RegisterOperatorToAVS(operator common.Address, operatorSignature ISignatureUtilsSignatureWithSaltAndExpiry) (*types.Transaction, error) {
	return _ContractMachServiceManager.Contract.RegisterOperatorToAVS(&_ContractMachServiceManager.TransactOpts, operator, operatorSignature)
}

// RegisterOperatorToAVS is a paid mutator transaction binding the contract method 0x9926ee7d.
//
// Solidity: function registerOperatorToAVS(address operator, (bytes,bytes32,uint256) operatorSignature) returns()
func (_ContractMachServiceManager *ContractMachServiceManagerTransactorSession) RegisterOperatorToAVS(operator common.Address, operatorSignature ISignatureUtilsSignatureWithSaltAndExpiry) (*types.Transaction, error) {
	return _ContractMachServiceManager.Contract.RegisterOperatorToAVS(&_ContractMachServiceManager.TransactOpts, operator, operatorSignature)
}

// RemoveAlert is a paid mutator transaction binding the contract method 0xd8ff953d.
//
// Solidity: function removeAlert(bytes32 messageHash) returns()
func (_ContractMachServiceManager *ContractMachServiceManagerTransactor) RemoveAlert(opts *bind.TransactOpts, messageHash [32]byte) (*types.Transaction, error) {
	return _ContractMachServiceManager.contract.Transact(opts, "removeAlert", messageHash)
}

// RemoveAlert is a paid mutator transaction binding the contract method 0xd8ff953d.
//
// Solidity: function removeAlert(bytes32 messageHash) returns()
func (_ContractMachServiceManager *ContractMachServiceManagerSession) RemoveAlert(messageHash [32]byte) (*types.Transaction, error) {
	return _ContractMachServiceManager.Contract.RemoveAlert(&_ContractMachServiceManager.TransactOpts, messageHash)
}

// RemoveAlert is a paid mutator transaction binding the contract method 0xd8ff953d.
//
// Solidity: function removeAlert(bytes32 messageHash) returns()
func (_ContractMachServiceManager *ContractMachServiceManagerTransactorSession) RemoveAlert(messageHash [32]byte) (*types.Transaction, error) {
	return _ContractMachServiceManager.Contract.RemoveAlert(&_ContractMachServiceManager.TransactOpts, messageHash)
}

// RemoveFromAllowlist is a paid mutator transaction binding the contract method 0x5da93d7e.
//
// Solidity: function removeFromAllowlist(address operator) returns()
func (_ContractMachServiceManager *ContractMachServiceManagerTransactor) RemoveFromAllowlist(opts *bind.TransactOpts, operator common.Address) (*types.Transaction, error) {
	return _ContractMachServiceManager.contract.Transact(opts, "removeFromAllowlist", operator)
}

// RemoveFromAllowlist is a paid mutator transaction binding the contract method 0x5da93d7e.
//
// Solidity: function removeFromAllowlist(address operator) returns()
func (_ContractMachServiceManager *ContractMachServiceManagerSession) RemoveFromAllowlist(operator common.Address) (*types.Transaction, error) {
	return _ContractMachServiceManager.Contract.RemoveFromAllowlist(&_ContractMachServiceManager.TransactOpts, operator)
}

// RemoveFromAllowlist is a paid mutator transaction binding the contract method 0x5da93d7e.
//
// Solidity: function removeFromAllowlist(address operator) returns()
func (_ContractMachServiceManager *ContractMachServiceManagerTransactorSession) RemoveFromAllowlist(operator common.Address) (*types.Transaction, error) {
	return _ContractMachServiceManager.Contract.RemoveFromAllowlist(&_ContractMachServiceManager.TransactOpts, operator)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractMachServiceManager *ContractMachServiceManagerTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractMachServiceManager.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractMachServiceManager *ContractMachServiceManagerSession) RenounceOwnership() (*types.Transaction, error) {
	return _ContractMachServiceManager.Contract.RenounceOwnership(&_ContractMachServiceManager.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractMachServiceManager *ContractMachServiceManagerTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ContractMachServiceManager.Contract.RenounceOwnership(&_ContractMachServiceManager.TransactOpts)
}

// SetPauserRegistry is a paid mutator transaction binding the contract method 0x10d67a2f.
//
// Solidity: function setPauserRegistry(address newPauserRegistry) returns()
func (_ContractMachServiceManager *ContractMachServiceManagerTransactor) SetPauserRegistry(opts *bind.TransactOpts, newPauserRegistry common.Address) (*types.Transaction, error) {
	return _ContractMachServiceManager.contract.Transact(opts, "setPauserRegistry", newPauserRegistry)
}

// SetPauserRegistry is a paid mutator transaction binding the contract method 0x10d67a2f.
//
// Solidity: function setPauserRegistry(address newPauserRegistry) returns()
func (_ContractMachServiceManager *ContractMachServiceManagerSession) SetPauserRegistry(newPauserRegistry common.Address) (*types.Transaction, error) {
	return _ContractMachServiceManager.Contract.SetPauserRegistry(&_ContractMachServiceManager.TransactOpts, newPauserRegistry)
}

// SetPauserRegistry is a paid mutator transaction binding the contract method 0x10d67a2f.
//
// Solidity: function setPauserRegistry(address newPauserRegistry) returns()
func (_ContractMachServiceManager *ContractMachServiceManagerTransactorSession) SetPauserRegistry(newPauserRegistry common.Address) (*types.Transaction, error) {
	return _ContractMachServiceManager.Contract.SetPauserRegistry(&_ContractMachServiceManager.TransactOpts, newPauserRegistry)
}

// SetStaleStakesForbidden is a paid mutator transaction binding the contract method 0x416c7e5e.
//
// Solidity: function setStaleStakesForbidden(bool value) returns()
func (_ContractMachServiceManager *ContractMachServiceManagerTransactor) SetStaleStakesForbidden(opts *bind.TransactOpts, value bool) (*types.Transaction, error) {
	return _ContractMachServiceManager.contract.Transact(opts, "setStaleStakesForbidden", value)
}

// SetStaleStakesForbidden is a paid mutator transaction binding the contract method 0x416c7e5e.
//
// Solidity: function setStaleStakesForbidden(bool value) returns()
func (_ContractMachServiceManager *ContractMachServiceManagerSession) SetStaleStakesForbidden(value bool) (*types.Transaction, error) {
	return _ContractMachServiceManager.Contract.SetStaleStakesForbidden(&_ContractMachServiceManager.TransactOpts, value)
}

// SetStaleStakesForbidden is a paid mutator transaction binding the contract method 0x416c7e5e.
//
// Solidity: function setStaleStakesForbidden(bool value) returns()
func (_ContractMachServiceManager *ContractMachServiceManagerTransactorSession) SetStaleStakesForbidden(value bool) (*types.Transaction, error) {
	return _ContractMachServiceManager.Contract.SetStaleStakesForbidden(&_ContractMachServiceManager.TransactOpts, value)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractMachServiceManager *ContractMachServiceManagerTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ContractMachServiceManager.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractMachServiceManager *ContractMachServiceManagerSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ContractMachServiceManager.Contract.TransferOwnership(&_ContractMachServiceManager.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractMachServiceManager *ContractMachServiceManagerTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ContractMachServiceManager.Contract.TransferOwnership(&_ContractMachServiceManager.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_ContractMachServiceManager *ContractMachServiceManagerTransactor) Unpause(opts *bind.TransactOpts, newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractMachServiceManager.contract.Transact(opts, "unpause", newPausedStatus)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_ContractMachServiceManager *ContractMachServiceManagerSession) Unpause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractMachServiceManager.Contract.Unpause(&_ContractMachServiceManager.TransactOpts, newPausedStatus)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_ContractMachServiceManager *ContractMachServiceManagerTransactorSession) Unpause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractMachServiceManager.Contract.Unpause(&_ContractMachServiceManager.TransactOpts, newPausedStatus)
}

// UpdateAVSMetadataURI is a paid mutator transaction binding the contract method 0xa98fb355.
//
// Solidity: function updateAVSMetadataURI(string _metadataURI) returns()
func (_ContractMachServiceManager *ContractMachServiceManagerTransactor) UpdateAVSMetadataURI(opts *bind.TransactOpts, _metadataURI string) (*types.Transaction, error) {
	return _ContractMachServiceManager.contract.Transact(opts, "updateAVSMetadataURI", _metadataURI)
}

// UpdateAVSMetadataURI is a paid mutator transaction binding the contract method 0xa98fb355.
//
// Solidity: function updateAVSMetadataURI(string _metadataURI) returns()
func (_ContractMachServiceManager *ContractMachServiceManagerSession) UpdateAVSMetadataURI(_metadataURI string) (*types.Transaction, error) {
	return _ContractMachServiceManager.Contract.UpdateAVSMetadataURI(&_ContractMachServiceManager.TransactOpts, _metadataURI)
}

// UpdateAVSMetadataURI is a paid mutator transaction binding the contract method 0xa98fb355.
//
// Solidity: function updateAVSMetadataURI(string _metadataURI) returns()
func (_ContractMachServiceManager *ContractMachServiceManagerTransactorSession) UpdateAVSMetadataURI(_metadataURI string) (*types.Transaction, error) {
	return _ContractMachServiceManager.Contract.UpdateAVSMetadataURI(&_ContractMachServiceManager.TransactOpts, _metadataURI)
}

// UpdateQuorumThresholdPercentage is a paid mutator transaction binding the contract method 0x429d5bf0.
//
// Solidity: function updateQuorumThresholdPercentage(uint8 thresholdPercentage) returns()
func (_ContractMachServiceManager *ContractMachServiceManagerTransactor) UpdateQuorumThresholdPercentage(opts *bind.TransactOpts, thresholdPercentage uint8) (*types.Transaction, error) {
	return _ContractMachServiceManager.contract.Transact(opts, "updateQuorumThresholdPercentage", thresholdPercentage)
}

// UpdateQuorumThresholdPercentage is a paid mutator transaction binding the contract method 0x429d5bf0.
//
// Solidity: function updateQuorumThresholdPercentage(uint8 thresholdPercentage) returns()
func (_ContractMachServiceManager *ContractMachServiceManagerSession) UpdateQuorumThresholdPercentage(thresholdPercentage uint8) (*types.Transaction, error) {
	return _ContractMachServiceManager.Contract.UpdateQuorumThresholdPercentage(&_ContractMachServiceManager.TransactOpts, thresholdPercentage)
}

// UpdateQuorumThresholdPercentage is a paid mutator transaction binding the contract method 0x429d5bf0.
//
// Solidity: function updateQuorumThresholdPercentage(uint8 thresholdPercentage) returns()
func (_ContractMachServiceManager *ContractMachServiceManagerTransactorSession) UpdateQuorumThresholdPercentage(thresholdPercentage uint8) (*types.Transaction, error) {
	return _ContractMachServiceManager.Contract.UpdateQuorumThresholdPercentage(&_ContractMachServiceManager.TransactOpts, thresholdPercentage)
}

// ContractMachServiceManagerAlertConfirmedIterator is returned from FilterAlertConfirmed and is used to iterate over the raw logs and unpacked data for AlertConfirmed events raised by the ContractMachServiceManager contract.
type ContractMachServiceManagerAlertConfirmedIterator struct {
	Event *ContractMachServiceManagerAlertConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractMachServiceManagerAlertConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractMachServiceManagerAlertConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractMachServiceManagerAlertConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractMachServiceManagerAlertConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractMachServiceManagerAlertConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractMachServiceManagerAlertConfirmed represents a AlertConfirmed event raised by the ContractMachServiceManager contract.
type ContractMachServiceManagerAlertConfirmed struct {
	AlertHeaderHash [32]byte
	MessageHash     [32]byte
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterAlertConfirmed is a free log retrieval operation binding the contract event 0xfdda6f7d4825a4f1e4e97b50a26a69a8bcc3f4fcb1113cc14ce8e7098ca63665.
//
// Solidity: event AlertConfirmed(bytes32 indexed alertHeaderHash, bytes32 messageHash)
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) FilterAlertConfirmed(opts *bind.FilterOpts, alertHeaderHash [][32]byte) (*ContractMachServiceManagerAlertConfirmedIterator, error) {

	var alertHeaderHashRule []interface{}
	for _, alertHeaderHashItem := range alertHeaderHash {
		alertHeaderHashRule = append(alertHeaderHashRule, alertHeaderHashItem)
	}

	logs, sub, err := _ContractMachServiceManager.contract.FilterLogs(opts, "AlertConfirmed", alertHeaderHashRule)
	if err != nil {
		return nil, err
	}
	return &ContractMachServiceManagerAlertConfirmedIterator{contract: _ContractMachServiceManager.contract, event: "AlertConfirmed", logs: logs, sub: sub}, nil
}

// WatchAlertConfirmed is a free log subscription operation binding the contract event 0xfdda6f7d4825a4f1e4e97b50a26a69a8bcc3f4fcb1113cc14ce8e7098ca63665.
//
// Solidity: event AlertConfirmed(bytes32 indexed alertHeaderHash, bytes32 messageHash)
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) WatchAlertConfirmed(opts *bind.WatchOpts, sink chan<- *ContractMachServiceManagerAlertConfirmed, alertHeaderHash [][32]byte) (event.Subscription, error) {

	var alertHeaderHashRule []interface{}
	for _, alertHeaderHashItem := range alertHeaderHash {
		alertHeaderHashRule = append(alertHeaderHashRule, alertHeaderHashItem)
	}

	logs, sub, err := _ContractMachServiceManager.contract.WatchLogs(opts, "AlertConfirmed", alertHeaderHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractMachServiceManagerAlertConfirmed)
				if err := _ContractMachServiceManager.contract.UnpackLog(event, "AlertConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAlertConfirmed is a log parse operation binding the contract event 0xfdda6f7d4825a4f1e4e97b50a26a69a8bcc3f4fcb1113cc14ce8e7098ca63665.
//
// Solidity: event AlertConfirmed(bytes32 indexed alertHeaderHash, bytes32 messageHash)
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) ParseAlertConfirmed(log types.Log) (*ContractMachServiceManagerAlertConfirmed, error) {
	event := new(ContractMachServiceManagerAlertConfirmed)
	if err := _ContractMachServiceManager.contract.UnpackLog(event, "AlertConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractMachServiceManagerAlertConfirmerChangedIterator is returned from FilterAlertConfirmerChanged and is used to iterate over the raw logs and unpacked data for AlertConfirmerChanged events raised by the ContractMachServiceManager contract.
type ContractMachServiceManagerAlertConfirmerChangedIterator struct {
	Event *ContractMachServiceManagerAlertConfirmerChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractMachServiceManagerAlertConfirmerChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractMachServiceManagerAlertConfirmerChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractMachServiceManagerAlertConfirmerChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractMachServiceManagerAlertConfirmerChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractMachServiceManagerAlertConfirmerChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractMachServiceManagerAlertConfirmerChanged represents a AlertConfirmerChanged event raised by the ContractMachServiceManager contract.
type ContractMachServiceManagerAlertConfirmerChanged struct {
	PreviousAddress common.Address
	NewAddress      common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterAlertConfirmerChanged is a free log retrieval operation binding the contract event 0x175f27847b3568e0da876ffca3dc0bb52db4e6556346aedb530c6fe86610da27.
//
// Solidity: event AlertConfirmerChanged(address previousAddress, address newAddress)
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) FilterAlertConfirmerChanged(opts *bind.FilterOpts) (*ContractMachServiceManagerAlertConfirmerChangedIterator, error) {

	logs, sub, err := _ContractMachServiceManager.contract.FilterLogs(opts, "AlertConfirmerChanged")
	if err != nil {
		return nil, err
	}
	return &ContractMachServiceManagerAlertConfirmerChangedIterator{contract: _ContractMachServiceManager.contract, event: "AlertConfirmerChanged", logs: logs, sub: sub}, nil
}

// WatchAlertConfirmerChanged is a free log subscription operation binding the contract event 0x175f27847b3568e0da876ffca3dc0bb52db4e6556346aedb530c6fe86610da27.
//
// Solidity: event AlertConfirmerChanged(address previousAddress, address newAddress)
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) WatchAlertConfirmerChanged(opts *bind.WatchOpts, sink chan<- *ContractMachServiceManagerAlertConfirmerChanged) (event.Subscription, error) {

	logs, sub, err := _ContractMachServiceManager.contract.WatchLogs(opts, "AlertConfirmerChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractMachServiceManagerAlertConfirmerChanged)
				if err := _ContractMachServiceManager.contract.UnpackLog(event, "AlertConfirmerChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAlertConfirmerChanged is a log parse operation binding the contract event 0x175f27847b3568e0da876ffca3dc0bb52db4e6556346aedb530c6fe86610da27.
//
// Solidity: event AlertConfirmerChanged(address previousAddress, address newAddress)
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) ParseAlertConfirmerChanged(log types.Log) (*ContractMachServiceManagerAlertConfirmerChanged, error) {
	event := new(ContractMachServiceManagerAlertConfirmerChanged)
	if err := _ContractMachServiceManager.contract.UnpackLog(event, "AlertConfirmerChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractMachServiceManagerAlertRemovedIterator is returned from FilterAlertRemoved and is used to iterate over the raw logs and unpacked data for AlertRemoved events raised by the ContractMachServiceManager contract.
type ContractMachServiceManagerAlertRemovedIterator struct {
	Event *ContractMachServiceManagerAlertRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractMachServiceManagerAlertRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractMachServiceManagerAlertRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractMachServiceManagerAlertRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractMachServiceManagerAlertRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractMachServiceManagerAlertRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractMachServiceManagerAlertRemoved represents a AlertRemoved event raised by the ContractMachServiceManager contract.
type ContractMachServiceManagerAlertRemoved struct {
	MessageHash [32]byte
	Sender      common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterAlertRemoved is a free log retrieval operation binding the contract event 0x1bdeffc0337373bf2f6fd4219080133eeaaee0554206d9bb24a019d96973c1eb.
//
// Solidity: event AlertRemoved(bytes32 messageHash, address sender)
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) FilterAlertRemoved(opts *bind.FilterOpts) (*ContractMachServiceManagerAlertRemovedIterator, error) {

	logs, sub, err := _ContractMachServiceManager.contract.FilterLogs(opts, "AlertRemoved")
	if err != nil {
		return nil, err
	}
	return &ContractMachServiceManagerAlertRemovedIterator{contract: _ContractMachServiceManager.contract, event: "AlertRemoved", logs: logs, sub: sub}, nil
}

// WatchAlertRemoved is a free log subscription operation binding the contract event 0x1bdeffc0337373bf2f6fd4219080133eeaaee0554206d9bb24a019d96973c1eb.
//
// Solidity: event AlertRemoved(bytes32 messageHash, address sender)
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) WatchAlertRemoved(opts *bind.WatchOpts, sink chan<- *ContractMachServiceManagerAlertRemoved) (event.Subscription, error) {

	logs, sub, err := _ContractMachServiceManager.contract.WatchLogs(opts, "AlertRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractMachServiceManagerAlertRemoved)
				if err := _ContractMachServiceManager.contract.UnpackLog(event, "AlertRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAlertRemoved is a log parse operation binding the contract event 0x1bdeffc0337373bf2f6fd4219080133eeaaee0554206d9bb24a019d96973c1eb.
//
// Solidity: event AlertRemoved(bytes32 messageHash, address sender)
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) ParseAlertRemoved(log types.Log) (*ContractMachServiceManagerAlertRemoved, error) {
	event := new(ContractMachServiceManagerAlertRemoved)
	if err := _ContractMachServiceManager.contract.UnpackLog(event, "AlertRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractMachServiceManagerAllowlistDisabledIterator is returned from FilterAllowlistDisabled and is used to iterate over the raw logs and unpacked data for AllowlistDisabled events raised by the ContractMachServiceManager contract.
type ContractMachServiceManagerAllowlistDisabledIterator struct {
	Event *ContractMachServiceManagerAllowlistDisabled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractMachServiceManagerAllowlistDisabledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractMachServiceManagerAllowlistDisabled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractMachServiceManagerAllowlistDisabled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractMachServiceManagerAllowlistDisabledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractMachServiceManagerAllowlistDisabledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractMachServiceManagerAllowlistDisabled represents a AllowlistDisabled event raised by the ContractMachServiceManager contract.
type ContractMachServiceManagerAllowlistDisabled struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterAllowlistDisabled is a free log retrieval operation binding the contract event 0x2d35c8d348a345fd7b3b03b7cfcf7ad0b60c2d46742d5ca536342e4185becb07.
//
// Solidity: event AllowlistDisabled()
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) FilterAllowlistDisabled(opts *bind.FilterOpts) (*ContractMachServiceManagerAllowlistDisabledIterator, error) {

	logs, sub, err := _ContractMachServiceManager.contract.FilterLogs(opts, "AllowlistDisabled")
	if err != nil {
		return nil, err
	}
	return &ContractMachServiceManagerAllowlistDisabledIterator{contract: _ContractMachServiceManager.contract, event: "AllowlistDisabled", logs: logs, sub: sub}, nil
}

// WatchAllowlistDisabled is a free log subscription operation binding the contract event 0x2d35c8d348a345fd7b3b03b7cfcf7ad0b60c2d46742d5ca536342e4185becb07.
//
// Solidity: event AllowlistDisabled()
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) WatchAllowlistDisabled(opts *bind.WatchOpts, sink chan<- *ContractMachServiceManagerAllowlistDisabled) (event.Subscription, error) {

	logs, sub, err := _ContractMachServiceManager.contract.WatchLogs(opts, "AllowlistDisabled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractMachServiceManagerAllowlistDisabled)
				if err := _ContractMachServiceManager.contract.UnpackLog(event, "AllowlistDisabled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAllowlistDisabled is a log parse operation binding the contract event 0x2d35c8d348a345fd7b3b03b7cfcf7ad0b60c2d46742d5ca536342e4185becb07.
//
// Solidity: event AllowlistDisabled()
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) ParseAllowlistDisabled(log types.Log) (*ContractMachServiceManagerAllowlistDisabled, error) {
	event := new(ContractMachServiceManagerAllowlistDisabled)
	if err := _ContractMachServiceManager.contract.UnpackLog(event, "AllowlistDisabled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractMachServiceManagerAllowlistEnabledIterator is returned from FilterAllowlistEnabled and is used to iterate over the raw logs and unpacked data for AllowlistEnabled events raised by the ContractMachServiceManager contract.
type ContractMachServiceManagerAllowlistEnabledIterator struct {
	Event *ContractMachServiceManagerAllowlistEnabled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractMachServiceManagerAllowlistEnabledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractMachServiceManagerAllowlistEnabled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractMachServiceManagerAllowlistEnabled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractMachServiceManagerAllowlistEnabledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractMachServiceManagerAllowlistEnabledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractMachServiceManagerAllowlistEnabled represents a AllowlistEnabled event raised by the ContractMachServiceManager contract.
type ContractMachServiceManagerAllowlistEnabled struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterAllowlistEnabled is a free log retrieval operation binding the contract event 0x8a943acd5f4e6d3df7565a4a08a93f6b04cc31bb6c01ca4aef7abd6baf455ec3.
//
// Solidity: event AllowlistEnabled()
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) FilterAllowlistEnabled(opts *bind.FilterOpts) (*ContractMachServiceManagerAllowlistEnabledIterator, error) {

	logs, sub, err := _ContractMachServiceManager.contract.FilterLogs(opts, "AllowlistEnabled")
	if err != nil {
		return nil, err
	}
	return &ContractMachServiceManagerAllowlistEnabledIterator{contract: _ContractMachServiceManager.contract, event: "AllowlistEnabled", logs: logs, sub: sub}, nil
}

// WatchAllowlistEnabled is a free log subscription operation binding the contract event 0x8a943acd5f4e6d3df7565a4a08a93f6b04cc31bb6c01ca4aef7abd6baf455ec3.
//
// Solidity: event AllowlistEnabled()
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) WatchAllowlistEnabled(opts *bind.WatchOpts, sink chan<- *ContractMachServiceManagerAllowlistEnabled) (event.Subscription, error) {

	logs, sub, err := _ContractMachServiceManager.contract.WatchLogs(opts, "AllowlistEnabled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractMachServiceManagerAllowlistEnabled)
				if err := _ContractMachServiceManager.contract.UnpackLog(event, "AllowlistEnabled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAllowlistEnabled is a log parse operation binding the contract event 0x8a943acd5f4e6d3df7565a4a08a93f6b04cc31bb6c01ca4aef7abd6baf455ec3.
//
// Solidity: event AllowlistEnabled()
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) ParseAllowlistEnabled(log types.Log) (*ContractMachServiceManagerAllowlistEnabled, error) {
	event := new(ContractMachServiceManagerAllowlistEnabled)
	if err := _ContractMachServiceManager.contract.UnpackLog(event, "AllowlistEnabled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractMachServiceManagerInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the ContractMachServiceManager contract.
type ContractMachServiceManagerInitializedIterator struct {
	Event *ContractMachServiceManagerInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractMachServiceManagerInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractMachServiceManagerInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractMachServiceManagerInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractMachServiceManagerInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractMachServiceManagerInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractMachServiceManagerInitialized represents a Initialized event raised by the ContractMachServiceManager contract.
type ContractMachServiceManagerInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) FilterInitialized(opts *bind.FilterOpts) (*ContractMachServiceManagerInitializedIterator, error) {

	logs, sub, err := _ContractMachServiceManager.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ContractMachServiceManagerInitializedIterator{contract: _ContractMachServiceManager.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ContractMachServiceManagerInitialized) (event.Subscription, error) {

	logs, sub, err := _ContractMachServiceManager.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractMachServiceManagerInitialized)
				if err := _ContractMachServiceManager.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) ParseInitialized(log types.Log) (*ContractMachServiceManagerInitialized, error) {
	event := new(ContractMachServiceManagerInitialized)
	if err := _ContractMachServiceManager.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractMachServiceManagerOperatorAddedIterator is returned from FilterOperatorAdded and is used to iterate over the raw logs and unpacked data for OperatorAdded events raised by the ContractMachServiceManager contract.
type ContractMachServiceManagerOperatorAddedIterator struct {
	Event *ContractMachServiceManagerOperatorAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractMachServiceManagerOperatorAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractMachServiceManagerOperatorAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractMachServiceManagerOperatorAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractMachServiceManagerOperatorAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractMachServiceManagerOperatorAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractMachServiceManagerOperatorAdded represents a OperatorAdded event raised by the ContractMachServiceManager contract.
type ContractMachServiceManagerOperatorAdded struct {
	Operator common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOperatorAdded is a free log retrieval operation binding the contract event 0xac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d.
//
// Solidity: event OperatorAdded(address indexed operator)
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) FilterOperatorAdded(opts *bind.FilterOpts, operator []common.Address) (*ContractMachServiceManagerOperatorAddedIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ContractMachServiceManager.contract.FilterLogs(opts, "OperatorAdded", operatorRule)
	if err != nil {
		return nil, err
	}
	return &ContractMachServiceManagerOperatorAddedIterator{contract: _ContractMachServiceManager.contract, event: "OperatorAdded", logs: logs, sub: sub}, nil
}

// WatchOperatorAdded is a free log subscription operation binding the contract event 0xac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d.
//
// Solidity: event OperatorAdded(address indexed operator)
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) WatchOperatorAdded(opts *bind.WatchOpts, sink chan<- *ContractMachServiceManagerOperatorAdded, operator []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ContractMachServiceManager.contract.WatchLogs(opts, "OperatorAdded", operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractMachServiceManagerOperatorAdded)
				if err := _ContractMachServiceManager.contract.UnpackLog(event, "OperatorAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorAdded is a log parse operation binding the contract event 0xac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d.
//
// Solidity: event OperatorAdded(address indexed operator)
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) ParseOperatorAdded(log types.Log) (*ContractMachServiceManagerOperatorAdded, error) {
	event := new(ContractMachServiceManagerOperatorAdded)
	if err := _ContractMachServiceManager.contract.UnpackLog(event, "OperatorAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractMachServiceManagerOperatorAllowedIterator is returned from FilterOperatorAllowed and is used to iterate over the raw logs and unpacked data for OperatorAllowed events raised by the ContractMachServiceManager contract.
type ContractMachServiceManagerOperatorAllowedIterator struct {
	Event *ContractMachServiceManagerOperatorAllowed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractMachServiceManagerOperatorAllowedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractMachServiceManagerOperatorAllowed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractMachServiceManagerOperatorAllowed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractMachServiceManagerOperatorAllowedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractMachServiceManagerOperatorAllowedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractMachServiceManagerOperatorAllowed represents a OperatorAllowed event raised by the ContractMachServiceManager contract.
type ContractMachServiceManagerOperatorAllowed struct {
	Operator common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOperatorAllowed is a free log retrieval operation binding the contract event 0xdde65206cdee4ea27ef1b170724ba50b41ad09a3bf2dda12935fc40c4dbf6e75.
//
// Solidity: event OperatorAllowed(address operator)
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) FilterOperatorAllowed(opts *bind.FilterOpts) (*ContractMachServiceManagerOperatorAllowedIterator, error) {

	logs, sub, err := _ContractMachServiceManager.contract.FilterLogs(opts, "OperatorAllowed")
	if err != nil {
		return nil, err
	}
	return &ContractMachServiceManagerOperatorAllowedIterator{contract: _ContractMachServiceManager.contract, event: "OperatorAllowed", logs: logs, sub: sub}, nil
}

// WatchOperatorAllowed is a free log subscription operation binding the contract event 0xdde65206cdee4ea27ef1b170724ba50b41ad09a3bf2dda12935fc40c4dbf6e75.
//
// Solidity: event OperatorAllowed(address operator)
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) WatchOperatorAllowed(opts *bind.WatchOpts, sink chan<- *ContractMachServiceManagerOperatorAllowed) (event.Subscription, error) {

	logs, sub, err := _ContractMachServiceManager.contract.WatchLogs(opts, "OperatorAllowed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractMachServiceManagerOperatorAllowed)
				if err := _ContractMachServiceManager.contract.UnpackLog(event, "OperatorAllowed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorAllowed is a log parse operation binding the contract event 0xdde65206cdee4ea27ef1b170724ba50b41ad09a3bf2dda12935fc40c4dbf6e75.
//
// Solidity: event OperatorAllowed(address operator)
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) ParseOperatorAllowed(log types.Log) (*ContractMachServiceManagerOperatorAllowed, error) {
	event := new(ContractMachServiceManagerOperatorAllowed)
	if err := _ContractMachServiceManager.contract.UnpackLog(event, "OperatorAllowed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractMachServiceManagerOperatorDisallowedIterator is returned from FilterOperatorDisallowed and is used to iterate over the raw logs and unpacked data for OperatorDisallowed events raised by the ContractMachServiceManager contract.
type ContractMachServiceManagerOperatorDisallowedIterator struct {
	Event *ContractMachServiceManagerOperatorDisallowed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractMachServiceManagerOperatorDisallowedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractMachServiceManagerOperatorDisallowed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractMachServiceManagerOperatorDisallowed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractMachServiceManagerOperatorDisallowedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractMachServiceManagerOperatorDisallowedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractMachServiceManagerOperatorDisallowed represents a OperatorDisallowed event raised by the ContractMachServiceManager contract.
type ContractMachServiceManagerOperatorDisallowed struct {
	Operator common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOperatorDisallowed is a free log retrieval operation binding the contract event 0x8560daa191dd8e6fba276b053006b3990c46c94b842f85490f52c49b15cfe5cb.
//
// Solidity: event OperatorDisallowed(address operator)
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) FilterOperatorDisallowed(opts *bind.FilterOpts) (*ContractMachServiceManagerOperatorDisallowedIterator, error) {

	logs, sub, err := _ContractMachServiceManager.contract.FilterLogs(opts, "OperatorDisallowed")
	if err != nil {
		return nil, err
	}
	return &ContractMachServiceManagerOperatorDisallowedIterator{contract: _ContractMachServiceManager.contract, event: "OperatorDisallowed", logs: logs, sub: sub}, nil
}

// WatchOperatorDisallowed is a free log subscription operation binding the contract event 0x8560daa191dd8e6fba276b053006b3990c46c94b842f85490f52c49b15cfe5cb.
//
// Solidity: event OperatorDisallowed(address operator)
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) WatchOperatorDisallowed(opts *bind.WatchOpts, sink chan<- *ContractMachServiceManagerOperatorDisallowed) (event.Subscription, error) {

	logs, sub, err := _ContractMachServiceManager.contract.WatchLogs(opts, "OperatorDisallowed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractMachServiceManagerOperatorDisallowed)
				if err := _ContractMachServiceManager.contract.UnpackLog(event, "OperatorDisallowed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorDisallowed is a log parse operation binding the contract event 0x8560daa191dd8e6fba276b053006b3990c46c94b842f85490f52c49b15cfe5cb.
//
// Solidity: event OperatorDisallowed(address operator)
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) ParseOperatorDisallowed(log types.Log) (*ContractMachServiceManagerOperatorDisallowed, error) {
	event := new(ContractMachServiceManagerOperatorDisallowed)
	if err := _ContractMachServiceManager.contract.UnpackLog(event, "OperatorDisallowed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractMachServiceManagerOperatorRemovedIterator is returned from FilterOperatorRemoved and is used to iterate over the raw logs and unpacked data for OperatorRemoved events raised by the ContractMachServiceManager contract.
type ContractMachServiceManagerOperatorRemovedIterator struct {
	Event *ContractMachServiceManagerOperatorRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractMachServiceManagerOperatorRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractMachServiceManagerOperatorRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractMachServiceManagerOperatorRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractMachServiceManagerOperatorRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractMachServiceManagerOperatorRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractMachServiceManagerOperatorRemoved represents a OperatorRemoved event raised by the ContractMachServiceManager contract.
type ContractMachServiceManagerOperatorRemoved struct {
	Operator common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOperatorRemoved is a free log retrieval operation binding the contract event 0x80c0b871b97b595b16a7741c1b06fed0c6f6f558639f18ccbce50724325dc40d.
//
// Solidity: event OperatorRemoved(address indexed operator)
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) FilterOperatorRemoved(opts *bind.FilterOpts, operator []common.Address) (*ContractMachServiceManagerOperatorRemovedIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ContractMachServiceManager.contract.FilterLogs(opts, "OperatorRemoved", operatorRule)
	if err != nil {
		return nil, err
	}
	return &ContractMachServiceManagerOperatorRemovedIterator{contract: _ContractMachServiceManager.contract, event: "OperatorRemoved", logs: logs, sub: sub}, nil
}

// WatchOperatorRemoved is a free log subscription operation binding the contract event 0x80c0b871b97b595b16a7741c1b06fed0c6f6f558639f18ccbce50724325dc40d.
//
// Solidity: event OperatorRemoved(address indexed operator)
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) WatchOperatorRemoved(opts *bind.WatchOpts, sink chan<- *ContractMachServiceManagerOperatorRemoved, operator []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ContractMachServiceManager.contract.WatchLogs(opts, "OperatorRemoved", operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractMachServiceManagerOperatorRemoved)
				if err := _ContractMachServiceManager.contract.UnpackLog(event, "OperatorRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorRemoved is a log parse operation binding the contract event 0x80c0b871b97b595b16a7741c1b06fed0c6f6f558639f18ccbce50724325dc40d.
//
// Solidity: event OperatorRemoved(address indexed operator)
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) ParseOperatorRemoved(log types.Log) (*ContractMachServiceManagerOperatorRemoved, error) {
	event := new(ContractMachServiceManagerOperatorRemoved)
	if err := _ContractMachServiceManager.contract.UnpackLog(event, "OperatorRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractMachServiceManagerOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ContractMachServiceManager contract.
type ContractMachServiceManagerOwnershipTransferredIterator struct {
	Event *ContractMachServiceManagerOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractMachServiceManagerOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractMachServiceManagerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractMachServiceManagerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractMachServiceManagerOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractMachServiceManagerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractMachServiceManagerOwnershipTransferred represents a OwnershipTransferred event raised by the ContractMachServiceManager contract.
type ContractMachServiceManagerOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ContractMachServiceManagerOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ContractMachServiceManager.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ContractMachServiceManagerOwnershipTransferredIterator{contract: _ContractMachServiceManager.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ContractMachServiceManagerOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ContractMachServiceManager.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractMachServiceManagerOwnershipTransferred)
				if err := _ContractMachServiceManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) ParseOwnershipTransferred(log types.Log) (*ContractMachServiceManagerOwnershipTransferred, error) {
	event := new(ContractMachServiceManagerOwnershipTransferred)
	if err := _ContractMachServiceManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractMachServiceManagerPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the ContractMachServiceManager contract.
type ContractMachServiceManagerPausedIterator struct {
	Event *ContractMachServiceManagerPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractMachServiceManagerPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractMachServiceManagerPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractMachServiceManagerPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractMachServiceManagerPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractMachServiceManagerPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractMachServiceManagerPaused represents a Paused event raised by the ContractMachServiceManager contract.
type ContractMachServiceManagerPaused struct {
	Account         common.Address
	NewPausedStatus *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) FilterPaused(opts *bind.FilterOpts, account []common.Address) (*ContractMachServiceManagerPausedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractMachServiceManager.contract.FilterLogs(opts, "Paused", accountRule)
	if err != nil {
		return nil, err
	}
	return &ContractMachServiceManagerPausedIterator{contract: _ContractMachServiceManager.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *ContractMachServiceManagerPaused, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractMachServiceManager.contract.WatchLogs(opts, "Paused", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractMachServiceManagerPaused)
				if err := _ContractMachServiceManager.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) ParsePaused(log types.Log) (*ContractMachServiceManagerPaused, error) {
	event := new(ContractMachServiceManagerPaused)
	if err := _ContractMachServiceManager.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractMachServiceManagerPauserRegistrySetIterator is returned from FilterPauserRegistrySet and is used to iterate over the raw logs and unpacked data for PauserRegistrySet events raised by the ContractMachServiceManager contract.
type ContractMachServiceManagerPauserRegistrySetIterator struct {
	Event *ContractMachServiceManagerPauserRegistrySet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractMachServiceManagerPauserRegistrySetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractMachServiceManagerPauserRegistrySet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractMachServiceManagerPauserRegistrySet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractMachServiceManagerPauserRegistrySetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractMachServiceManagerPauserRegistrySetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractMachServiceManagerPauserRegistrySet represents a PauserRegistrySet event raised by the ContractMachServiceManager contract.
type ContractMachServiceManagerPauserRegistrySet struct {
	PauserRegistry    common.Address
	NewPauserRegistry common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterPauserRegistrySet is a free log retrieval operation binding the contract event 0x6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6.
//
// Solidity: event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) FilterPauserRegistrySet(opts *bind.FilterOpts) (*ContractMachServiceManagerPauserRegistrySetIterator, error) {

	logs, sub, err := _ContractMachServiceManager.contract.FilterLogs(opts, "PauserRegistrySet")
	if err != nil {
		return nil, err
	}
	return &ContractMachServiceManagerPauserRegistrySetIterator{contract: _ContractMachServiceManager.contract, event: "PauserRegistrySet", logs: logs, sub: sub}, nil
}

// WatchPauserRegistrySet is a free log subscription operation binding the contract event 0x6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6.
//
// Solidity: event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) WatchPauserRegistrySet(opts *bind.WatchOpts, sink chan<- *ContractMachServiceManagerPauserRegistrySet) (event.Subscription, error) {

	logs, sub, err := _ContractMachServiceManager.contract.WatchLogs(opts, "PauserRegistrySet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractMachServiceManagerPauserRegistrySet)
				if err := _ContractMachServiceManager.contract.UnpackLog(event, "PauserRegistrySet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePauserRegistrySet is a log parse operation binding the contract event 0x6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6.
//
// Solidity: event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) ParsePauserRegistrySet(log types.Log) (*ContractMachServiceManagerPauserRegistrySet, error) {
	event := new(ContractMachServiceManagerPauserRegistrySet)
	if err := _ContractMachServiceManager.contract.UnpackLog(event, "PauserRegistrySet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractMachServiceManagerQuorumThresholdPercentageChangedIterator is returned from FilterQuorumThresholdPercentageChanged and is used to iterate over the raw logs and unpacked data for QuorumThresholdPercentageChanged events raised by the ContractMachServiceManager contract.
type ContractMachServiceManagerQuorumThresholdPercentageChangedIterator struct {
	Event *ContractMachServiceManagerQuorumThresholdPercentageChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractMachServiceManagerQuorumThresholdPercentageChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractMachServiceManagerQuorumThresholdPercentageChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractMachServiceManagerQuorumThresholdPercentageChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractMachServiceManagerQuorumThresholdPercentageChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractMachServiceManagerQuorumThresholdPercentageChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractMachServiceManagerQuorumThresholdPercentageChanged represents a QuorumThresholdPercentageChanged event raised by the ContractMachServiceManager contract.
type ContractMachServiceManagerQuorumThresholdPercentageChanged struct {
	ThresholdPercentages uint8
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterQuorumThresholdPercentageChanged is a free log retrieval operation binding the contract event 0xc3acdc4f4bc283baa27c4207eb2c32954fbb26960847c9e15c2f7c8970134244.
//
// Solidity: event QuorumThresholdPercentageChanged(uint8 thresholdPercentages)
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) FilterQuorumThresholdPercentageChanged(opts *bind.FilterOpts) (*ContractMachServiceManagerQuorumThresholdPercentageChangedIterator, error) {

	logs, sub, err := _ContractMachServiceManager.contract.FilterLogs(opts, "QuorumThresholdPercentageChanged")
	if err != nil {
		return nil, err
	}
	return &ContractMachServiceManagerQuorumThresholdPercentageChangedIterator{contract: _ContractMachServiceManager.contract, event: "QuorumThresholdPercentageChanged", logs: logs, sub: sub}, nil
}

// WatchQuorumThresholdPercentageChanged is a free log subscription operation binding the contract event 0xc3acdc4f4bc283baa27c4207eb2c32954fbb26960847c9e15c2f7c8970134244.
//
// Solidity: event QuorumThresholdPercentageChanged(uint8 thresholdPercentages)
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) WatchQuorumThresholdPercentageChanged(opts *bind.WatchOpts, sink chan<- *ContractMachServiceManagerQuorumThresholdPercentageChanged) (event.Subscription, error) {

	logs, sub, err := _ContractMachServiceManager.contract.WatchLogs(opts, "QuorumThresholdPercentageChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractMachServiceManagerQuorumThresholdPercentageChanged)
				if err := _ContractMachServiceManager.contract.UnpackLog(event, "QuorumThresholdPercentageChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseQuorumThresholdPercentageChanged is a log parse operation binding the contract event 0xc3acdc4f4bc283baa27c4207eb2c32954fbb26960847c9e15c2f7c8970134244.
//
// Solidity: event QuorumThresholdPercentageChanged(uint8 thresholdPercentages)
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) ParseQuorumThresholdPercentageChanged(log types.Log) (*ContractMachServiceManagerQuorumThresholdPercentageChanged, error) {
	event := new(ContractMachServiceManagerQuorumThresholdPercentageChanged)
	if err := _ContractMachServiceManager.contract.UnpackLog(event, "QuorumThresholdPercentageChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractMachServiceManagerStaleStakesForbiddenUpdateIterator is returned from FilterStaleStakesForbiddenUpdate and is used to iterate over the raw logs and unpacked data for StaleStakesForbiddenUpdate events raised by the ContractMachServiceManager contract.
type ContractMachServiceManagerStaleStakesForbiddenUpdateIterator struct {
	Event *ContractMachServiceManagerStaleStakesForbiddenUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractMachServiceManagerStaleStakesForbiddenUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractMachServiceManagerStaleStakesForbiddenUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractMachServiceManagerStaleStakesForbiddenUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractMachServiceManagerStaleStakesForbiddenUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractMachServiceManagerStaleStakesForbiddenUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractMachServiceManagerStaleStakesForbiddenUpdate represents a StaleStakesForbiddenUpdate event raised by the ContractMachServiceManager contract.
type ContractMachServiceManagerStaleStakesForbiddenUpdate struct {
	Value bool
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterStaleStakesForbiddenUpdate is a free log retrieval operation binding the contract event 0x40e4ed880a29e0f6ddce307457fb75cddf4feef7d3ecb0301bfdf4976a0e2dfc.
//
// Solidity: event StaleStakesForbiddenUpdate(bool value)
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) FilterStaleStakesForbiddenUpdate(opts *bind.FilterOpts) (*ContractMachServiceManagerStaleStakesForbiddenUpdateIterator, error) {

	logs, sub, err := _ContractMachServiceManager.contract.FilterLogs(opts, "StaleStakesForbiddenUpdate")
	if err != nil {
		return nil, err
	}
	return &ContractMachServiceManagerStaleStakesForbiddenUpdateIterator{contract: _ContractMachServiceManager.contract, event: "StaleStakesForbiddenUpdate", logs: logs, sub: sub}, nil
}

// WatchStaleStakesForbiddenUpdate is a free log subscription operation binding the contract event 0x40e4ed880a29e0f6ddce307457fb75cddf4feef7d3ecb0301bfdf4976a0e2dfc.
//
// Solidity: event StaleStakesForbiddenUpdate(bool value)
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) WatchStaleStakesForbiddenUpdate(opts *bind.WatchOpts, sink chan<- *ContractMachServiceManagerStaleStakesForbiddenUpdate) (event.Subscription, error) {

	logs, sub, err := _ContractMachServiceManager.contract.WatchLogs(opts, "StaleStakesForbiddenUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractMachServiceManagerStaleStakesForbiddenUpdate)
				if err := _ContractMachServiceManager.contract.UnpackLog(event, "StaleStakesForbiddenUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStaleStakesForbiddenUpdate is a log parse operation binding the contract event 0x40e4ed880a29e0f6ddce307457fb75cddf4feef7d3ecb0301bfdf4976a0e2dfc.
//
// Solidity: event StaleStakesForbiddenUpdate(bool value)
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) ParseStaleStakesForbiddenUpdate(log types.Log) (*ContractMachServiceManagerStaleStakesForbiddenUpdate, error) {
	event := new(ContractMachServiceManagerStaleStakesForbiddenUpdate)
	if err := _ContractMachServiceManager.contract.UnpackLog(event, "StaleStakesForbiddenUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractMachServiceManagerUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the ContractMachServiceManager contract.
type ContractMachServiceManagerUnpausedIterator struct {
	Event *ContractMachServiceManagerUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractMachServiceManagerUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractMachServiceManagerUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractMachServiceManagerUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractMachServiceManagerUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractMachServiceManagerUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractMachServiceManagerUnpaused represents a Unpaused event raised by the ContractMachServiceManager contract.
type ContractMachServiceManagerUnpaused struct {
	Account         common.Address
	NewPausedStatus *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) FilterUnpaused(opts *bind.FilterOpts, account []common.Address) (*ContractMachServiceManagerUnpausedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractMachServiceManager.contract.FilterLogs(opts, "Unpaused", accountRule)
	if err != nil {
		return nil, err
	}
	return &ContractMachServiceManagerUnpausedIterator{contract: _ContractMachServiceManager.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *ContractMachServiceManagerUnpaused, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractMachServiceManager.contract.WatchLogs(opts, "Unpaused", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractMachServiceManagerUnpaused)
				if err := _ContractMachServiceManager.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_ContractMachServiceManager *ContractMachServiceManagerFilterer) ParseUnpaused(log types.Log) (*ContractMachServiceManagerUnpaused, error) {
	event := new(ContractMachServiceManagerUnpaused)
	if err := _ContractMachServiceManager.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
